
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** @author  John Miller
 *  @version 2.0
 *  @date    Thu Mar 13 14:06:11 EDT 2025
 *  @see     LICENSE (MIT style license file).
 *
 *  @note    Support for Transformation Functions with their Inverse
 *
 *  https://www.infoq.com/news/2023/10/foreign-function-and-memory-api/
 */

package scalation
package mathstat

import scala.collection.mutable.ArrayBuffer
import scala.math._

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `TForm` trait supports the use of transformation functions, such that it
 *  is easy to take the inverse transform.  When a transformation uses arguments,
 *  they are remembered for use by the inverse transformation.
 */
trait TForm:
    protected var lu: VectorD = VectorD (1, 2)                     // optional default range/bounds [l .. u]
    protected var a: VectorD  = null                               // optional argument vector
    protected var b: MatrixD  = null                               // optional argument matrix

    def apply (x: VectorD): Unit = a = x.mu_sig                    // set the argument vector

    def apply (x: MatrixD): Unit =                                 // set the argument matrix
        val c = ArrayBuffer [VectorD] ()
        for j <- x.indices2 do { apply (x(?, j)); c += a }
        b = MatrixD (c).transpose

    def setLU (_lu: VectorD): Unit = lu = _lu                      // set the default bounds

    def f (x: VectorD): VectorD                                    // abstract transformation function

    def fi (y: VectorD): VectorD                                   // abstract inverse transformation function

    val f: FunctionM2M  = (x: MatrixD) =>                          // matrix version of transformation function
        if b != null then
            val y = new MatrixD (x.dim, x.dim2)
            for j <- x.indices2 do { a = b(?, j); y(?, j) = f(x(?, j)) }
            y
        else
            x.mmap_(f(_))

    val fi: FunctionM2M = (y: MatrixD) =>                          // matrix version of inverse transformation function
        if b != null then
            val x = new MatrixD (y.dim, y.dim2)
            for j <- y.indices2 do { a = b(?, j); x(?, j) = fi(y(?, j)) }
            x
        else
            y.mmap_(fi(_))
end TForm


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `zForm` object applies the z-transformation (subtract mean and divide by standard deviation).
 */
object zForm extends TForm:
    def f (x: VectorD): VectorD  = (x - a(0)) / a(1)
    def fi (y: VectorD): VectorD = (y * a(1)) + a(0)

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `rangeForm` object transforms values to the default range/bounds lu.
 */
object rangeForm extends TForm:
    override def apply (x: VectorD): Unit = a = x.min_max ++ lu          // set the argument vector
    def f (x: VectorD): VectorD  = (x - a(0)) * (a(3) - a(2))/(a(1) - a(0)) + a(2)
    def fi (y: VectorD): VectorD = (y - a(2)) * (a(1) - a(0))/(a(3) - a(2)) + a(0)

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `logForm` object applies the log-transformation.
 */
object logForm extends TForm:
    def f (x: VectorD): VectorD  = x.log
    def fi (y: VectorD): VectorD = y.exp

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `log1pForm` object applies the log1p-transformation (log (z+1)).
 */
object log1pForm extends TForm:
    def f (x: VectorD): VectorD  = x.log1p
    def fi (y: VectorD): VectorD = y.expm1

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `cosForm` object applies the cosine-transformation.
 */
object cosForm extends TForm:
    override def apply (r: VectorD): Unit = a = r                        // set the argument vector
    def f (x: VectorD): VectorD  = x.map (z => cos (a(0) * Piby2 * z))
    def fi (y: VectorD): VectorD = y.map (z => acos (z) / (a(0) * Piby2))

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `sinForm` object applies the sine-transformation.
 */
object sinForm extends TForm:
    override def apply (r: VectorD): Unit = a = r                        // set the argument vector
    def f (x: VectorD): VectorD  = x.map (z => sin (a(0) * Piby2 * z))
    def fi (y: VectorD): VectorD = y.map (z => asin (z) / (a(0) * Piby2))

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `sqrtForm` object applies the square-root-transformation.
 */
object sqrtForm extends TForm:
    def f (x: VectorD): VectorD  = x.sqrt
    def fi (y: VectorD): VectorD = y ~^ 2

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `powForm` object applies the power-transformation x^p for power p > 1.
 */
object powForm extends TForm:
    override def apply (p: VectorD): Unit = a = p                        // set the argument vector
    def f (x: VectorD): VectorD  = x ~^ a(0)
    def fi (y: VectorD): VectorD = y ~^ (1/a(0))

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `rootForm` object applies the power-transformation x^r for root r < 1.
 */
object rootForm extends TForm:
    override def apply (r: VectorD): Unit = a = r                        // set the argument vector
    def f (x: VectorD): VectorD  = x ~^ a(0)
    def fi (y: VectorD): VectorD = y ~^ (1/a(0))


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `transformTest` tests the `Transform` class at the vector level.
 *  > runMain scalation.mathstat.transformTest
 */
@main def transformTest (): Unit =

    val x = VectorD (1, 2, 3)
    println (s"x = $x")

    banner ("zForm Transformation")
    zForm (x)                                                            // set the argument vector
    var y = zForm.f (x)
    var z = zForm.fi (y)
    println (s"y = $y, z = $z")

    banner ("rangeForm Transformation")
    rangeForm (x)                                                        // set the argument vector
    y = rangeForm.f (x)
    z = rangeForm.fi (y)
    println (s"y = $y, z = $z")

    banner ("logForm Transformation")
    y = logForm.f (x)
    z = logForm.fi (y)
    println (s"y = $y, z = $z")

    banner ("log1pForm Transformation")
    y = log1pForm.f (x)
    z = log1pForm.fi (y)
    println (s"y = $y, z = $z")

    banner ("cosForm Transformation")
    cosForm (VectorD (0.25))                                             // set the argument vector
    y = cosForm.f (x)
    z = cosForm.fi (y)
    println (s"y = $y, z = $z")

    banner ("sinForm Transformation")
    sinForm (VectorD (0.25))                                             // set the argument vector
    y = sinForm.f (x)
    z = sinForm.fi (y)
    println (s"y = $y, z = $z")

    banner ("sqrtForm Transformation")
    y = sqrtForm.f (x)
    z = sqrtForm.fi (y)
    println (s"y = $y, z = $z")

    banner ("powForm Transformation")
    powForm (VectorD (1.5))                                              // set the argument vector
    y = powForm.f (x)
    z = powForm.fi (y)
    println (s"y = $y, z = $z")

    banner ("rootForm Transformation")
    rootForm (VectorD (0.5))                                             // set the argument vector
    y = rootForm.f (x)
    z = rootForm.fi (y)
    println (s"y = $y, z = $z")

    banner ("recheck powForm Transformation")                            // note, previous apply still holds
    y = powForm.f (x)
    z = powForm.fi (y)
    println (s"y = $y, z = $z")

end transformTest


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `transformTest2` tests the `Transform` class at the matrix level.
 *  > runMain scalation.mathstat.transformTest2
 */
@main def transformTest2 (): Unit =

    val x = MatrixD ((3, 2), 1, 3,
                             2, 5,
                             3, 6)
    println (s"x = $x")

    banner ("zForm Transformation")
    zForm (x)                                                            // set the argument vector
    var y = zForm.f (x)
    var z = zForm.fi (y)
    println (s"y = $y, z = $z")

    banner ("rangeForm Transformation")
    rangeForm (x)                                                        // set the argument vector
    y = rangeForm.f (x)
    z = rangeForm.fi (y)
    println (s"y = $y, z = $z")

    banner ("logForm Transformation")
    y = logForm.f (x)
    z = logForm.fi (y)
    println (s"y = $y, z = $z")

    banner ("log1pForm Transformation")
    y = log1pForm.f (x)
    z = log1pForm.fi (y)
    println (s"y = $y, z = $z")

    banner ("cosForm Transformation")
    cosForm (VectorD (0.25))                                             // set the argument vector
    y = cosForm.f (x)
    z = cosForm.fi (y)
    println (s"y = $y, z = $z")
 
    banner ("sinForm Transformation")
    sinForm (VectorD (0.25))                                             // set the argument vector
    y = sinForm.f (x)
    z = sinForm.fi (y)
    println (s"y = $y, z = $z")

    banner ("sqrtForm Transformation")
    y = sqrtForm.f (x)
    z = sqrtForm.fi (y)
    println (s"y = $y, z = $z")

    banner ("powForm Transformation")
    powForm (VectorD (1.5))                                              // set the argument vector
    y = powForm.f (x)
    z = powForm.fi (y)
    println (s"y = $y, z = $z")

    banner ("rootForm Transformation")
    rootForm (VectorD (0.5))                                             // set the argument vector
    y = rootForm.f (x)
    z = rootForm.fi (y)
    println (s"y = $y, z = $z")

    banner ("recheck powForm Transformation")                            // note, previous apply still holds
    y = powForm.f (x)
    z = powForm.fi (y)
    println (s"y = $y, z = $z")

end transformTest2

