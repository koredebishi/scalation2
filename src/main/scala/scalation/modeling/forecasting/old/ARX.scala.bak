
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** @author  John Miller
 *  @version 2.0
 *  @date    Sun Jun 30 13:27:00 EDT 2024
 *  @see     LICENSE (MIT style license file).
 *
 *  @note    Model: Auto-Regressive on lagged y and xe (ARX) using OLS
 *
 *  @see `scalation.modeling.Regression`
 *  @see `scalation.modeling.forecasting2.ARY` when no exogenous variable are needed

 */

package scalation
package modeling
package forecasting2

import scala.math.{max, min}

import scalation.mathstat._
import scalation.modeling.{Regression => REGRESSION}
//import scalation.modeling.{RidgeRegression => REGRESSION}
//import scalation.modeling.{LassoRegression => REGRESSION}

import Example_Covid.{loadData, response}
//import Example_LakeLevels.y

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `ARX` class provides basic time series analysis capabilities for ARX models.
 *  ARX models build on `ARY` by including one or more exogenous (xe) variables.
 *  Given time series data stored in vector y, its next value y_t = combination of
 *  last p values of y and the last q values of each exogenous variable xe_j.
 *
 *      y_t = b dot x_t + e_t
 *
 *  where y_t is the value of y at time t and e_t is the residual/error term.
 *  @param x        the data/input matrix (lagged columns of y and xe) @see `ARX.apply`
 *  @param y        the response/output vector (time series data) 
 *  @param hh       the maximum forecasting horizon (h = 1 to hh)
 *  @param fname    the feature/variable names
 *  @param tRng     the time range, if relevant (time index may suffice)
 *  @param hparam   the hyper-parameters (defaults to `ARX.hp`)
 *  @param bakcast  whether a backcasted value is prepended to the time series (defaults to false)
 */
class ARX (x: MatrixD, y: VectorD, hh: Int, n_exo: Int, fname: Array [String] = null,
           tRng: Range = null, hparam: HyperParameter = ARY.hp,
           bakcast: Boolean = false)                                    // backcasted values only used in `buildMatrix4TS`
      extends Forecaster (y, hh, tRng, hparam, bakcast):                // no automatic backcasting, @see `ARX.appky`

    private val debug = debugf ("ARX", true)                            // debug function
    private val flaw  = flawf ("ARX")                                   // flaw function
    private val p     = hparam("p").toInt                               // use the last p endogenous values (p lags)
    private val q     = hparam("q").toInt                               // use the last q exogenous values (q lags)
    private val spec  = hparam("spec").toInt                            // additional terms: 0 => none, 1 => constant, 2 => linear
    private val reg   = new REGRESSION (x, y, fname, hparam)            // delegate training to regression

    modelName = s"ARX($p, $q)"

    debug ("init", s"$modelName with $n_exo exogenous variables and additional term spec = $spec")
    debug ("init", s"[ x | y ] = ${x :^+ y}")

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Get the data/input matrix built from lagged y values.
     */
    override def getX: MatrixD = x

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Train/fit an `ARX` model to the times-series data in vector y_.
     *  Estimate the coefficient vector b for a p-th order Auto-Regressive ARX(p) model.
     *  Uses OLS Matrix Fatorization to determine the coefficients, i.e., the b (Ï†) vector.
     *  @param x_  the data/input matrix (e.g., full x)
     *  @param y_  the training/full response vector (e.g., full y)
     */
    override def train (x_ : MatrixD, y_ : VectorD): Unit =
        debug ("train", s"$modelName, x_.dims = ${x_.dims}, y_.dim = ${y_.dim}")
        reg.train (x_, y_)                                              // train the regression model
        b = reg.parameter                                               // coefficients from regression
    end train

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Train and test the forecasting model y_ = f(y-past) + e and report its QoF
     *  and plot its predictions.  Return the predictions and QoF.
     *  NOTE: must use `trainNtest_x` when an x matrix is used, such as in `ARX`.
     *  @param x_  the training/full data/input matrix (defaults to full x)
     *  @param y_  the training/full response/output vector (defaults to full y)
     *  @param xx  the testing/full data/input matrix (defaults to full x)
     *  @param yy  the testing/full response/output vector (defaults to full y)
     */
    def trainNtest_x (x_ : MatrixD = x, y_ : VectorD = y)(xx: MatrixD = x, yy: VectorD = y): (VectorD, VectorD) =
        train (x_, y_)                                                  // train the model on training set
        val (yp, qof) = test (xx, yy)                                   // test the model on testing set
        println (report (qof))                                          // report on Quality of Fit (QoF)
        (yp, qof)
    end trainNtest_x

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Test FORECASTS of a forecasting model y_ = f(lags (y_)) + e
     *  and RETURN (1) aligned actual values, (2) its forecasts and (3) QoF vector.
     *  Testing may be in-sample (on the training set) or out-of-sample (on the testing set)
     *  as determined by the parameters passed in.  Note: must call train and forecastAll
     *  before testF.
     *  @param h   the forecasting horizon, number of steps ahead to produce forecasts
     *  @param y_  the testing/full response/output vector
     */
    override def testF (h: Int, y_ : VectorD): (VectorD, VectorD, VectorD) =
        val h_  = h - 1
        val yy  = y_(h_ until y_.dim)                                   // align the actual values
        val yfh = yf(?, h)(0 until y_.dim-h_)                           // column h of the forecast matrix
        println (s"yy.dim = ${yy.dim}, yfh.dim = ${yfh.dim}")
//      Forecaster.differ (yy, yfh)                                     // uncomment for debugging
        assert (yy.dim == yfh.dim)                                      // make sure the vector sizes agree

        new Plot (null, yy, yfh, s"testF: yy, yfh vs. t for $modelName @h = $h", lines = true)
        mod_resetDF (yy.dim)                                            // reset the degrees of freedom
        (yy, yfh, diagnose (yy, yfh))                                   // return actual, forecasted and QoF vectors
    end testF

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Models need to provide a means for updating the Degrees of Freedom (DF).
     *  @param size  the size of dataset (full, train, or test)
     */
    override def mod_resetDF (size: Int): Unit =
        val dfm = max (1, parameter.size - 1)                           // degrees of freedom for model
        debug ("mod_resetDF", s"dfm = $dfm, df = ${size-dfm}")
        resetDF (dfm, size - dfm)
    end mod_resetDF

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Predict a value for y_t using the 1-step ahead forecast.
     *
     *      y_t = b_0 + b_1 y_t-1 + b_2 y_t-2 + ... + b_p y_t-p = b dot x_t
     *
     *  FIX - parameter order is in conflict with AR models.
     *  @param t   the time point being predicted
     *  @param y_  the actual values to use in making predictions (ignored)
     */
    override def predict (t: Int, y_ : VectorD): Double =
        val yp = reg.predict (x(t))
//      debug ("predict", s"@t = $t, b = $b dot x(t) = ${x(t)} = yp = $yp vs. y_ = ${y_(t)}")
        yp
    end predict

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Produce a vector of size hh, h = 1 to hh-steps ahead forecasts for the model,
     *  i.e., forecast the following time points:  t+1, ..., t+h.
     *  Intended to work with rolling validation (analog of predict method).
     *  @param t   the time point from which to make forecasts
     *  @param y_  the actual values to use in making predictions
     */
    override def forecast (t: Int, y_ : VectorD = y): VectorD =
        val yh = new VectorD (hh)                                       // hold forecasts for each horizon
        for h <- 1 to hh do
            val xy   = forge (x(min (t+1, x.dim-1)), yf(t), h)          // FIX - why t+1
            println ("forecast: xy = $xy")
            val pred = reg.predict (xy)                                 // slide in prior forecasted values
//          debug ("forecast", s"h = $h, @t = $t, xy = $xy, yp = $pred, y_ = ${y_(t)}")
            yf(t, h) = pred                                             // record in forecast matrix
            yh(h-1)  = pred                                             // record forecasts for each horizon
        yh                                                              // return forecasts for all horizons
    end forecast

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Forecast values for all y_.dim time points at horizon h (h-steps ahead).
     *  Assign into FORECAST MATRIX and return the h-steps ahead forecast.
     *  Note, `predictAll` provides predictions for h = 1.
     *  @see `forecastAll` method in `Forecaster` trait.
     *  @param h   the forecasting horizon, number of steps ahead to produce forecasts
     *  @param y_  the actual values to use in making forecasts
     */
    override def forecastAt (h: Int, y_ : VectorD = y): VectorD =
        if h < 2 then flaw ("forecastAt", s"horizon h = $h must be at least 2")

        for t <- y_.indices do                                          // make forecasts over all time points for horizon h
            val xy = forge (x(t), yf(t), h)
            val pred = reg.predict (xy)
//          debug ("forecastAt", s"h = $h, @t = $t, xy = $xy, yp = $pred, y_ = ${y_(t)}")
            yf(t, h) = pred                                             // record in forecast matrix
        yf(?, h)                                                        // return the h-step ahead forecast vector
    end forecastAt

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Forge a new vector from the first spec values of x, the last p-h+1 values
     *  of x (past values) and values 1 to h-1 from the forecasts.
     *  FIX - will need to pull endogenous values and exogenous values
     *  @param xx  the t-th row of the input matrix (lagged actual values)
     *  @param yy  the t-th row of the forecast matrix (forecasted future values)
     */
    def forge (xx: VectorD, yy: VectorD, h: Int): VectorD =
        val n_endo  = spec + p                                         // number of trend + endogenous values
        val x_trend = xx(0 until spec)                                 // get trend values
        val x_act   = xx(n_endo-(p+1-h) until n_endo)                  // get actual lagged y-values (endogenous)
        val nyy     = n_endo - x_trend.dim - x_act.dim                 // number of forecasted values needed
//      println (s"forge: h = $h, n_nedo = $n_endo, [ ${x_trend.dim}, ${x_act.dim} ], nyy = $nyy")
        val x_fcast = yy(h-nyy until h)                                // get forecasted y-values
        var xy      = x_trend ++ x_act ++ x_fcast
 
        for j <- 0 until n_exo do                                      // for the j-th exogenous variable
            xy = xy ++ shift_l (xx(j*q until (j+1)*q), h)              // get actual lagged xe-values for exogenous variable j
        xy
    end forge

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Shift vector z, h places to the left and fill on right with zeroes.
     *  Ex: [ 1, 2, 3, 4, 5] shift 1 yields [2, 3, 4, 5, 0]
     *  @param z  the vector to shift
     *  @param h  the number of places to shift
     */
    def shift_l (z: VectorD, h: Int): VectorD =
        val _z = new VectorD (z.dim)
        for k <- h until z.dim do _z(k-h) = z(k)
        _z
    end shift_l

end ARX


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `ARX` companion object provides factory methods for the `ARX` class.
 */
object ARX:

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Create an `ARX` object by building an input matrix xy and then calling the constructor.
     *  @param xe      the matrix of exogenous variable values
     *  @param y       the response vector (time series data)
     *  @param hh      the maximum forecasting horizon (h = 1 to hh)
     *  @param fname   the feature/variable names
     *  @param tRng    the time range, if relevant (time index may suffice)
     *  @param hparam  the hyper-parameters
     */
    def apply (xe: MatrixD, y: VectorD, hh: Int, fname: Array [String] = null,
               tRng: Range = null, hparam: HyperParameter = ARY.hp): ARX =
        val p    = hparam("p").toInt                                    // use the last p endogenous values
        val q    = hparam("q").toInt                                    // use the last q exogenous values
        val spec = hparam("spec").toInt                                 // 0 => none, 1 => constant, 2 => linear trend
        val xy   = buildMatrix4TS (xe, y, p, q, spec)
        new ARX (xy, y, hh, xe.dim2, fname, tRng, hparam)
    end apply

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Build the input matrix by combining the p + spec columns for the trend and
     *  endogenous variable with the q * xe.dim2 columns for the exogenous variables.
     *  @param xe    the matrix of exogenous variable values
     *  @param y     the response vector (time series data)
     *  @param p     the number of lags for the endogenous variable (lags 1 to p)
     *  @param q     the number of lags for each exogenous variable (lags 1 to q)
     *  @param spec  the number of trend terms (0 => none, 1 => constant, 2 => linear trend)
     */
    def buildMatrix4TS (xe: MatrixD, y: VectorD, p: Int, q: Int, spec: Int = 1): MatrixD =
        ARY.buildMatrix4TS (y, p, spec) ++^ buildMatrix_exo (xe, q)
    end buildMatrix4TS

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Build the second part of the input matrix consisting of the q * xe.dim2 columns
     *  for the exogenous variables.
     *  @param xe    the matrix of exogenous variable values
     *  @param q     the number of lags for each exogenous variable (lags 1 to q)
     */
    def buildMatrix_exo (xe: MatrixD, q: Int): MatrixD = 
        var xx: MatrixD = buildMatrix_exo_col (xe(?, 0), q)
        for j <- 1 until xe.dim2 do
            xx = xx ++^ buildMatrix_exo_col (xe(?, j), q)
        xx
    end buildMatrix_exo

    //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Given the j-th exogenous variable vector xe_j, build and return an input/predictor
     *  MATRIX xx.
     *  The first lag responses can't be predicted due to missing past values.
     *  Therefore the number of rows in xx is reduced to xe.dim - 1.
     *  @param xej  the j-th exogenous variable vector
     *  @param q    the maximum lag included (inclusive) for the exogenous variable (1 to q)
     */
    def buildMatrix_exo_col (xej: VectorD, q: Int): MatrixD = 
        val xe_j = backfill (xej)
        val xx = new MatrixD (xe_j.dim, q)
        for i <- xx.indices do
            for k <- xx.indices2 do xx(i, q - 1 - k) = xe_j(max0(i - 1 - k))
        println (s"xx = $xx")
        xx
    end buildMatrix_exo_col

    //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Backfill the zero prefix of exogenous variable j (xej) by backcasting.  The zero
     *  prefix will be at least of size 1 as 0.0 is initially prepended.
     *  @param xej  the j-th exogenous variable vector
     */
    def backfill (xej: VectorD): VectorD =
        val xe_j = xej :+ 0.0                                           // prepend with zero
        val ii = xej.indexWhere (_ != 0.0)                              // find the first non-zero value
        println (s"ii = $ii")
        for i <- ii-1 to 0 by -1 do                                     // replace zero prefix with backcasted values
            xe_j(i) = WeightedMovingAverage.backcast (xe_j, i)          // backcast from index i
        xe_j
    end backfill

end ARX


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `aRXTest` main function tests the `ARX` class on real data:
 *  Forecasting Lake Levels using In-Sample Testing (In-ST).
 *  Test forecasts (h = 1 to hh steps ahead forecasts).
 *  @see cran.r-project.org/web/packages/fpp/fpp.pdf
 *  > runMain scalation.modeling.forecasting2.aRXTest
 *
@main def aRXTest (): Unit =

    val hh = 3                                                          // maximum forecasting horizon

    val mod = ARX (y, hh)                                               // create model for time series data
    banner (s"In-ST Forecasts: ${mod.modelName} on LakeLevels Dataset")
    mod.trainNtest_x ()()                                               // train and test on full dataset

    mod.forecastAll ()                                                  // forecast h-steps ahead (h = 1 to hh) for all y
    Forecaster.evalForecasts (mod, mod.getYb, hh)
    println (s"Final In-ST Forecast Matrix yf = ${mod.getYf}")

end aRXTest
 */


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `aRXTest2` main function tests the `ARX` class on real data:
 *  Forecasting Lake Levels using Train-n-Test Split (TnT) with Rolling Validation.
 *  Test forecasts (h = 1 to hh steps ahead forecasts).
 *  @see cran.r-project.org/web/packages/fpp/fpp.pdf
 *  > runMain scalation.modeling.forecasting2.aRXTest2
 *
@main def aRXTest2 (): Unit =

    val hh = 3                                                          // maximum forecasting horizon

    val mod = ARX (y, hh)                                               // create model for time series data
    banner (s"TnT Forecasts: ${mod.modelName} on LakeLevels Dataset")
    mod.trainNtest_x ()()                                               // train and test on full dataset

    mod.rollValidate ()                                                 // TnT with Rolling Validation
    println (s"Final TnT Forecast Matrix yf = ${mod.getYf}")

end aRXTest2
 */


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `aRXTest3` main function tests the `ARX` class on real data:
 *  Forecasting COVID-19 using In-Sample Testing (In-ST).
 *  Test forecasts (h = 1 to hh steps ahead forecasts).
 *  > runMain scalation.modeling.forecasting2.aRXTest3
 */
@main def aRXTest3 (): Unit =

//  val exo_vars = Array ("icu_patients", "hosp_patients", "new_tests", "people_vaccinated")
    val exo_vars = Array ("icu_patients", "hosp_patients")
    val (xxe, yy) = loadData (exo_vars, response)
    println (s"xxe.dims = ${xxe.dims}, yy.dim = ${yy.dim}")

//  val xe = xxe                                                        // full
    val xe = xxe(0 until 116)                                           // clip the flat end
//  val y  = yy                                                         // full
    val y  = yy(0 until 116)                                            // clip the flat end
    val hh = 6                                                          // maximum forecasting horizon

    new Plot (null, y, null, s"y (new_deaths) vs. t", lines = true)
    for j <- exo_vars.indices do
        new Plot (null, xe(?, j), null, s"x_$j (${exo_vars(j)}) vs. t", lines = true)

    for p <- 1 to 5 do                                                  // number of lags
        ARY.hp("p") = p  
        ARY.hp("q") = p  
        val mod = ARX (xe, y, hh)                                       // create model for time series data
        banner (s"In-ST Forecasts: ${mod.modelName} on COVID-19 Dataset")
        mod.trainNtest_x ()()                                           // train and test on full dataset

        mod.forecastAll ()                                              // forecast h-steps ahead (h = 1 to hh) for all y
        Forecaster.evalForecasts (mod, mod.getYb, hh)
        println (s"Final In-ST Forecast Matrix yf = ${mod.getYf}")
    end for

end aRXTest3


//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `aRXTest4` main function tests the `ARX` class on real data:
 *  Forecasting COVID-19 using Train-n-Test Split (TnT) with Rolling Validation.
 *  Test forecasts (h = 1 to hh steps ahead forecasts).
 *  > runMain scalation.modeling.forecasting2.aRXTest4
 *
@main def aRXTest4 (): Unit =

    val yy = loadData_y ()
//  val y  = yy                                                         // full
    val y  = yy(0 until 116)                                            // clip the flat end
    val hh = 6                                                          // maximum forecasting horizon

    for p <- 2 to 2 do                                                  // number of lags
        ARX.hp("p") = p
        val mod = ARX (y, hh)                                           // create model for time series data
        banner (s"TnT Forecasts: ${mod.modelName} on COVID-19 Dataset")
        mod.trainNtest_x ()()                                           // use customized trainNtest_x

        mod.setSkip (0)
        mod.rollValidate ()                                             // TnT with Rolling Validation
        println (s"After Roll TnT Forecast Matrix yf = ${mod.getYf}")
        mod.diagnoseAll (y, mod.getYf, Forecaster.teRng (y.dim), 0)     // only diagnose on the testing set
        println (s"Final TnT Forecast Matrix yf = ${mod.getYf}")
    end for

end aRXTest4
 */

