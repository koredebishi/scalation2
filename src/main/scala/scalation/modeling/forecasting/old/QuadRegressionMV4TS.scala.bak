
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** @author  John Miller
 *  @version 2.0
 *  @date    Sun Feb 13 16:22:21 EST 2022
 *  @see     LICENSE (MIT style license file).
 *
 *  @title   Model: Quadratic Multi-Variate Regression for Time Series
 */

package scalation
package modeling
package forecasting

import scala.math.max

import scalation.mathstat._

import neuralnet.RegressionMV

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `QuadRegressionMV4TS` object supports regression for Time Series data.
 *  Given a response vector y, and a predictor matrix x is built that consists of
 *  lagged y vectors.   Additional future response vectors are built for training.
 *      y_t = b dot x
 *  where x = [y_{t-1}, y_{t-2}, ... y_{t-lag}].
 *  Matrix x includes constant, linear and quadratic terms.
 */
object QuadRegressionMV4TS:

    private val debug   = debugf ("QuadRegressionMV4TS", true)            // debug function
    private val flaw    = flawf ("QuadRegressionMV4TS")                   // flaw function
    private val MISSING = -0.0                                            // missing value

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Create a `RegressionMV` object from a Time Series response vector y.
     *  The input/data matrix x is formed from the lagged y vectors as columns in matrix x.
     *  Quadratic terms are added to the model, one for each lag.
     *  @param y          the original un-expanded output/response vector
     *  @param lag        the maximum lag included (inclusive)
     *  @param h          the forecasting horizon (1, 2, ... h)
     *  @param intercept  whether to add a column of all ones to the matrix (intercept)
     *  @param hparam     the hyper-parameters ((use Regression.hp for default)
     */
    def apply (y: VectorD, lag: Int, h: Int, intercept: Boolean = true,
               hparam: HyperParameter = Regression.hp): RegressionMV =
        var (x, yy) = buildMatrix4TS (y, lag, h)                          // column for each lag
        x = x ++^ x~^2                                                    // add quadratic terms
        if intercept then x = VectorD.one (yy.dim) +^: x                  // add first column of all ones

        val mod = new RegressionMV (x, yy, null, hparam)
        mod.modelName = s"QuadRegressionMV4TS_$lag"
        mod
    end apply

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Create a `RegressionMV` object from a response vector.  The input/data matrix
     *  x is formed from the lagged y vectors as columns in matrix x.
     *  In addition, lagged exogenous variables are added.
     *  @param y          the original un-expanded output/response vector
     *  @param lag        the maximum lag included (inclusive)
     *  @parax ex         the input matrix for 1st exogenous variable
     *  @parax ex2        the input matrix for 2nd exogenous variable (optional)
     *  @parax ex3        the input matrix for 3rd exogenous variable (optional)
     *  @param h          the forecasting horizon (1, 2, ... h)
     *  @param intercept  whether to add a column of all ones to the matrix (intercept)
     *  @param hparam     the hyper-parameters (use Regression.hp for default)
     *  @param elag1      the minimum exo lag included (inclusive)
     *  @param elag2      the maximum exo lag included (inclusive)
    def exo (y: VectorD, lag: Int, ex: VectorD, ex2: VectorD = null, ex3: VectorD = null,
             h: Int, intercept: Boolean = true, hparam: HyperParameter = Regression.hp)
            (elag1: Int = max (1, lag / 5),
             elag2: Int = max (1, lag)): RegressionMV =
        var (x, yy) = buildMatrix4TS (y, lag, h)                          // column for each lag
        if intercept then x = VectorD.one (yy.dim) +^: x                  // add first column of all ones
        val endoCols = x.dim2
        println (s"endogenous: columns = $endoCols")

        var xx = buildMatrix4TS_exo (ex, lag, elag1, elag2)
        x = x ++^ xx                                                      // add columns for 1st lagged exo var
        if ex2 != null then
           val xx2 = buildMatrix4TS_exo (ex2, lag, elag1, elag2)
           x = x ++^ xx2                                                  // add columns for 2nd lagged exo var
        end if
        if ex3 != null then
           val xx3 = buildMatrix4TS_exo (ex3, lag, elag1, elag2)
           x = x ++^ xx3                                                  // add columns for 2nd lagged exo var
        end if
        println (s"exogenous: columns = ${x.dim2 - endoCols}")

        println (s"exo: x.dims = ${x.dims}, yy.dim = ${yy.dim}")
//      println (s"exo: x = $x \n yy = $yy")
        val mod = new RegressionMV (x, yy, null, hparam)
        mod.modelName = s"QuadRegressionMV4TS.exo_$lag"
        mod
    end exo
     */

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Create a `RegressionMV` object from a response vector to fit a quadratic
     *  surface to Time Series data.  The input/data matrix x is formed from the
     *  lagged y vectors as columns in matrix x.
     *  In addition, lagged exogenous variables are added.
     *  @param y          the original un-expanded output/response vector
     *  @param lag        the maximum lag included (inclusive)
     *  @parax ex         the input matrix for exogenous variables (one per column)
     *  @param h          the forecasting horizon (1, 2, ... h)
     *  @param intercept  whether to add a column of all ones to the matrix (intercept)
     *  @param hparam     the hyper-parameters (use Regression.hp for default)
     *  @param elag1      the minimum exo lag included (inclusive)
     *  @param elag2      the maximum exo lag included (inclusive)
     */
    def exo (y: VectorD, lag: Int, ex: MatrixD, h: Int,
             intercept: Boolean = true, hparam: HyperParameter = Regression.hp)
            (elag1: Int = max (1, lag / 5),
             elag2: Int = max (1, lag)): RegressionMV =
        var (x, yy) = buildMatrix4TS (y, lag, h)                          // column for each lag
        x = x ++^ x~^2                                                    // add quadratic terms
        if intercept then x = VectorD.one (yy.dim) +^: x                  // add first column of all ones
        val endoCols = x.dim2
        println (s"endogenous: columns = $endoCols")

        x = x ++^ Regression4TS.makeExoCols (lag, ex, elag1, elag2)       // add columns for each lagged exo var
        println (s"exogenous: columns = ${x.dim2 - endoCols}")

        println (s"exo: x.dims = ${x.dims}, yy.dim = ${yy.dim}")
//      println (s"exo: x = $x \n yy = $yy")
        val mod = new RegressionMV (x, yy, null, hparam)
        mod.modelName = s"QuadRegressionMV4TS.exo$lag"
        mod
    end exo

end QuadRegressionMV4TS


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `quadRegressionMV4TSTest` main function tests the `QuadRegressionMV4TS` object.
 *  This test is used to CHECK that the buildMatrix4TS function is working correctly.
 *  May get NaN for some maximum lags (p) due to multi-collinearity.
 *  > runMain scalation.modeling.forecasting.quadRegressionMV4TSTest
 */
@main def quadRegressionMV4TSTest (): Unit =

    val m = 30
    val y = VectorD.range (1, m)                                       // used to CHECK the buildMatrix4TS function
    val h = 3                                                          // the forecasting horizon

    for p <- 5 to 5 do                                                 // autoregressive hyper-parameter p
        banner (s"Test: QuadRegressionMV4TS with $p lags")
        val mod = QuadRegressionMV4TS (y, p, h)                            // create model for time series data
        mod.trainNtest ()()                                            // train the model on full dataset
        println (mod.summary)

        val yy = mod.getY
        val yp = mod.predict (mod.getX)
        for k <- yp.indices2 do
            new Plot (null, yy(?, k), yp(?, k), s"yy_$k vs. yp_$k for ${mod.modelName} (h=${k+1}) with $p lags", lines = true)
        end for
    end for

end quadRegressionMV4TSTest


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `quadRegressionMV4TSTest2` main function tests the `RegressionMV4TS` class on real data:
 *  Forecasting lake levels.  Uses quadratic regression.
 *  @see cran.r-project.org/web/packages/fpp/fpp.pdf
 *  > runMain scalation.modeling.forecasting.quadRegressionMV4TSTest2
 */
@main def quadRegressionMV4TSTest2 (): Unit =

    import Example_LakeLevels.y
    val m = y.dim
    val h = 2                                                          // the forecasting horizon

    for p <- 1 to 7 do                                                 // autoregressive hyper-parameter p
        banner (s"Test: QuadRegressionMV4TS with $p lags")
        val mod = QuadRegressionMV4TS (y, p, h)                            // create model for time series data
        mod.trainNtest ()()                                            // train the model on full dataset
        println (mod.summary)

        banner ("Predictions/Forecasts")                               // direct forecasting technique
        val yy = mod.getY
        val yf = mod.predict (mod.getX)
        for k <- yf.indices2 do
            new Plot (null, yy(?, k), yf(?, k), s"yy_$k vs. yf_$k for ${mod.modelName} (h=${k+1}) with $p lags", lines = true)
        end for
        println (s"yf = $yf")
        println (s"yf.dims = ${yf.dims}")
    end for

end quadRegressionMV4TSTest2


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `quadRegressionMV4TSTest3` main function tests the `RegressionMV4TS` class on real data:
 *  Forecasting COVID-19 Weekly Data.  Uses quadratic regression, In-Sample Testing using
 *  endogenous variable.
 *  > runMain scalation.modeling.forecasting.quadRegressionMV4TSTest3
 */
@main def quadRegressionMV4TSTest3 (): Unit =

    val LAGS = 7                                                            // number of lags
    val h    = 4                                                            // forecasting horizon

    val exo_vars = Array ("icu_patients")
    val (xx, yy) = Example_Covid.loadData (exo_vars, "new_deaths")
    val iskip = yy.indexWhere (_ >= 6.0)                                    // find day with at least 6 deaths
    println (s"iskip = $iskip is first day with at least 6 deaths")

    val ex = xx(iskip until xx.dim)                                         // trim away the first iskip rows
    val y  = yy(iskip until yy.dim)
    println (s"ex.dims = ${ex.dims}, y.dim = ${y.dim}")

    banner ("Test In-Sample QuadRegressionMV4TS on COVID-19 Weekly Data")
//  val mod = QuadRegressionMV4TS (y, LAGS, h)                              // create model for time series data
    val mod = QuadRegressionMV4TS.rescale (y, LAGS, h)                      // create model for time series data - scaling
    val (yp, qof) = mod.trainNtest ()()                                     // train on full and test on full
    val yy_ = y(LAGS until y.dim)

    for k <- 0 until h do
        new Plot (null, yy_, yp(?, k), s"${mod.modelName}, yy vs. yp @ h = $k", lines = true)
    end for

    banner (s"Feature Selection Technique: Stepwise")
    val (cols, rSq) = mod.stepRegressionAll (cross = false)                 // R^2, R^2 bar, sMAPE, NA
    val k = cols.size
    println (s"k = $k, n = ${mod.getX.dim2}")
    new PlotM (null, rSq.transpose, Array ("R^2", "R^2 bar", "sMAPE", "NA"),
               s"R^2 vs n for RegressionMV4TS with tech", lines = true)
    println (mod.summary ())

    banner ("Feature Importance")
    println (s"Stepwise: rSq = $rSq")
//  val imp = mod.importance (cols.toArray, rSq)
//  for (c, r) <- imp do println (s"col = $c, \t ${header(c)}, \t importance = $r")

end quadRegressionMV4TSTest3


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `quadRegressionMV4TSTest4` main function tests the `RegressionMV4TS` class on real data:
 *  Forecasting COVID-19 Weekly Data.  Uses quadratic regression, In-Sample Testing using endogenous
 *  and exogeneous variables.
 *  > runMain scalation.modeling.forecasting.quadRegressionMV4TSTest4
 */
@main def quadRegressionMV4TSTest4 (): Unit =

    val exo_vars = Array ("icu_patients", "hosp_patients", "new_tests", "people_vaccinated")
    val (xx, yy) = Example_Covid.loadData (exo_vars, "new_deaths")
    val iskip = yy.indexWhere (_ >= 6.0)                                    // find day with at least 6 deaths
    println (s"iskip = $iskip is first day with at least 6 deaths")

    val ex = xx(iskip until xx.dim)                                         // trim away the first iskip rows
    val y  = yy(iskip until yy.dim)
    println (s"ex.dims = ${ex.dims}, y.dim = ${y.dim}")

    banner ("Test In-Sample QuadRegressionMV4TS.exo on COVID-19 Weekly Data")
    val mod = QuadRegressionMV4TS.exo (y, 10, ex, 4)(1, 11)                 // create model for time series data with exo
    val (yp, qof) = mod.trainNtest ()()                                     // train on full and test on full
    val yy_ = y(10 until y.dim)
    new Plot (null, yy_, yp(?, 0), s"${mod.modelName}, yy vs. yp", lines = true)

//  val tech = SelectionTech.Forward                                        // pick one feature selection technique
//  val tech = SelectionTech.Backward
    val tech = SelectionTech.Stepwise

    banner (s"Feature Selection Technique: $tech")
    val (cols, rSq) = mod.selectFeatures (tech, cross = false)              // R^2, R^2 bar, sMAPE, NA
    val k = cols.size
    println (s"k = $k, n = ${mod.getX.dim2}")
    new PlotM (null, rSq.transpose, Array ("R^2", "R^2 bar", "sMAPE", "NA"),
               s"R^2 vs n for RegressionMV4TS with tech", lines = true)
    println (mod.summary ())

    banner ("Feature Importance")
    println (s"$tech: rSq = $rSq")
//  val imp = mod.importance (cols.toArray, rSq)
//  for (c, r) <- imp do println (s"col = $c, \t ${header(c)}, \t importance = $r")

end quadRegressionMV4TSTest4


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `quadRegressionMV4TSTest5` main function tests the `QuadRegressionMV4TS` class on real data:
 *  Forecasting COVID-19 Weekly Data.  Uses Quadratic Regression.  Does TnT Testing on endogenous
 *  and exogenous variables.  Determine the terms to include in the model for TnT from using
 *  Stepwise on In-Sample.
 *  > runMain scalation.modeling.forecasting.quadRegressionMV4TSTest5
 */
@main def quadRegressionMV4TSTest5 (): Unit =

    val exo_vars = Array ("icu_patients", "hosp_patients", "new_tests", "people_vaccinated")
    val (xx, yy) = Example_Covid.loadData (exo_vars, "new_deaths")
    val iskip = yy.indexWhere (_ >= 6.0)                                    // find day with at least 6 deaths
    println (s"iskip = $iskip is first day with at least 6 deaths")

    val ex = xx(iskip until xx.dim)                                         // trim away the first iskip rows
    val y  = yy(iskip until yy.dim)
    println (s"ex.dims = ${ex.dims}, y.dim = ${y.dim}")

    banner ("Test In-Sample QuadRegressionMV4TS.exo on COVID-19 Weekly Data")
    val mod = QuadRegressionMV4TS.exo (y, 10, ex, 4)(1, 11)                 // create model for time series data with exo
    val (yp, qof) = mod.trainNtest ()()                                     // train on full and test on full
    val yy_ = y(10 until y.dim)
    new Plot (null, yy_, yp(?, 0), s"${mod.modelName}, yy vs. yp", lines = true)

//  val tech = SelectionTech.Forward                                        // pick one feature selection technique
//  val tech = SelectionTech.Backward
    val tech = SelectionTech.Stepwise

    banner (s"Feature Selection Technique: $tech")
    val (cols, rSq) = mod.selectFeatures (tech, cross = false)              // R^2, R^2 bar, sMAPE, NA
    val k = cols.size
    println (s"k = $k, n = ${mod.getX.dim2}")
    new PlotM (null, rSq.transpose, Array ("R^2", "R^2 bar", "sMAPE", "NA"),
               s"R^2 vs n for RegressionMV4TS with tech", lines = true)
    println (mod.summary ())

    banner ("Feature Importance")
    println (s"$tech: rSq = $rSq")
//  val imp = mod.importance (cols.toArray, rSq)
//  for (c, r) <- imp do println (s"col = $c, \t ${header(c)}, \t importance = $r")

    banner ("Run TnT on Best model")
    val bmod = mod.getBest._3                                               // get the best model from feature selection
    val (x_, y_, xtest, ytest) = RegressionMV4TS.split_TnT (bmod.getX, bmod.getY)
    val (yptest, qoftest) = bmod.trainNtest (x_, y_)(xtest, ytest)          // train on (x_, y_) and test on (xtest, ytest)
    new Plot (null, ytest(?, 0), yptest(?, 0), s"${mod.modelName}, ytest vs. yptest", lines = true)

end quadRegressionMV4TSTest5


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `quadRegressionMV4TSTest6` main function tests the `QuadRegressionMV4TS` class on real data:
 *  Forecasting COVID-19 Weekly Data.  Uses Quadratic Regression.  Does TnT Testing on endogenous
 *  and exogenous variables.  Determine the terms to include in the model for TnT from using
 *  Stepwise on In-Sample.
 *  > runMain scalation.modeling.forecasting.quadRegressionMV4TSTest6
 */
@main def quadRegressionMV4TSTest6 (): Unit =

    val exo_vars = Array ("icu_patients", "hosp_patients", "new_tests", "people_vaccinated")
    val (xx, yy) = Example_Covid.loadData (exo_vars, "new_deaths")
    val iskip = yy.indexWhere (_ >= 6.0)                                    // find day with at least 6 deaths
    println (s"iskip = $iskip is first day with at least 6 deaths")

    val ex = xx(iskip until xx.dim)                                         // trim away the first iskip rows
    val y  = yy(iskip until yy.dim)
    println (s"ex.dims = ${ex.dims}, y.dim = ${y.dim}")

    banner ("Test In-Sample QuadRegressionMV4TS.exo on COVID-19 Weekly Data")
    val mod = QuadRegressionMV4TS.exo (y, 10, ex, 4)(1, 11)                 // create model for time series data with exo
    val (yp, qof) = mod.trainNtest ()()                                     // train on full and test on full
    val yy_ = y(10 until y.dim)
    new Plot (null, yy_, yp(?, 0), s"${mod.modelName}, yy vs. yp", lines = true)

//  val tech = SelectionTech.Forward                                        // pick one feature selection technique
//  val tech = SelectionTech.Backward
    val tech = SelectionTech.Stepwise

    banner (s"Feature Selection Technique: $tech")
    val (cols, rSq) = mod.selectFeatures (tech, cross = false)              // R^2, R^2 bar, sMAPE, NA
    val k = cols.size
    println (s"k = $k, n = ${mod.getX.dim2}")
    new PlotM (null, rSq.transpose, Array ("R^2", "R^2 bar", "sMAPE", "NA"),
               s"R^2 vs n for RegressionMV4TS with tech", lines = true)
    println (mod.summary ())

    banner ("Feature Importance")
    println (s"$tech: rSq = $rSq")
//  val imp = mod.importance (cols.toArray, rSq)
//  for (c, r) <- imp do println (s"col = $c, \t ${header(c)}, \t importance = $r")

    banner ("Run Rolling Validation on QuadRegressionMV4TS Best model")
    val bmod = mod.getBest._3                                               // get the best model from feature selection
    RegressionMV4TS.rollValidate (bmod, 1)

end quadRegressionMV4TSTest6

