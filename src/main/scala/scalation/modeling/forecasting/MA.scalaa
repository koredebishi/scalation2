
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** @author  John Miller
 *  @version 2.0
 *  @date    Mon Nov 25 13:22:27 EST 2024
 *  @see     LICENSE (MIT style license file).
 *
 *  @note    Model: Moving-Average (MA)
 *
 *  @see real-statistics.com/time-series-analysis/moving-average-processes/ma-coefficients-acf/
 *  @see people.stat.sc.edu/hitchcock/stat520ch7slides.pdf
 */

//  U N D E R   D E V E L O P M E N T

package scalation
package modeling
package forecasting

import scala.math.{abs, sqrt}

import scalation.mathstat._
import scalation.optimization.quasi_newton.{BFGS => Optimizer}       // change import to change optimizer
//import scalation.optimization.quasi_newton.{LBFGS => Optimizer}
import scalation.random.NormalVec_c

import Example_Covid.loadData_y
import Example_LakeLevels.y

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `MA` class provides basic time series analysis capabilities for Moving-Average
 *  (MA) models.  MA models are often used for forecasting.
 *  Given time series data stored in vector y, its next value y_t = combination of last q errors.
 *
 *      y_t = δ + b dot [e_t-1, ..., e_t-q) + e_t
 *
 *  where y_t is the value of y at time t and e_t is the residual/error term.
 *  @param y        the response vector (time series data) 
 *  @param hh       the maximum forecasting horizon (h = 1 to hh)
 *  @param tRng     the time range, if relevant (time index may suffice)
 *  @param hparam   the hyper-parameters (defaults to AR.hp)
 *  @param bakcast  whether a backcasted value is prepended to the time series (defaults to false)
 */
class MA (y: VectorD, hh: Int, tRng: Range = null,
          hparam: HyperParameter = AR.hp,
          bakcast: Boolean = false)
      extends Forecaster (y, hh, tRng, hparam, bakcast)
         with Correlogram (y):

    private val debug  = debugf ("MA", true)                            // debug function
    private val flaw   = flawf ("MA")                                   // flaw function
    private val q      = hparam("q").toInt                              // use the last q errors/shocks
    private val useMoM = false                                          // estimate using Method of Moments (MoM)
    private var δ      = NO_DOUBLE                                      // drift/intercept/constant term (mean)
    private var z      = VectorD.nullv                                  // var for centered time series

    modelName = s"MA($q)"

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Train/fit an `MA` model to the times-series data in vector y_.
     *  Estimate the coefficient vector b for a q-th order Moving-Average MA(q) model.
     *  Uses Nonlinear Least Squares Estimation (LSE) to determine the coefficients.
     *  The b (θ) vector holds the coefficients multiplying previous errors/shocks.
     *  @param x_null  the data/input matrix (ignored, pass null)
     *  @param y_      the training/full response vector (e.g., full y)
     */
    override def train (x_null: MatrixD, y_ : VectorD): Unit =
        makeCorrelogram (y_)                                            // correlogram computes, acf, pacf, psi matrix
        val r = acF                                                     // autocorrelation function (requires makeCorrelogram)
        δ     = statsF.mu                                               // compute drift/intercept (just the mean)

        if useMoM && q == 1 then                                        // get MoM estimate by solving a quadratic equation
            b = MA.solve_MA1 (r(1))                                     // coefficients for MA(1) using MoM
        else                                                            // get LSE estimate using Nonlinear Optimzer
            b = NormalVec_c (q, 0.0, 0.1).gen                           // randomly initialize the coefficients
            val mu = y_.mean                                            // sample mean of y_
            z = y_ - mu                                                 // optimization works better using zero-centered data
            val optimizer = new Optimizer (css)                         // apply Quasi-Newton optimizer
            val (fb, bb) = optimizer.solve (b, 0.5)                     // optimal solution for loss function and parameters
            b = bb                                                      // assign optimized parameters to vector b
            
        debug ("train", s"optimize q = $q, δ = $δ, b = $b, r = $r")
    end train

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Return the conditional sum of squared errors (loss function to optimize).
     *  @param b_ the working copy of the parameter vector b = θ.
     */
    def css (b_ : VectorD): Double =
        b = b_.copy                                                     // copy parameters from b_ vector
        val z_ = z(1 until z.dim)                                       // skip first (backcasted) value
        val zp = predictAll (z)                                         // predicted value for z
//      debug ("css", s"z_.dim = ${z_.dim}, zp.dim = ${zp.dim}")
        ssef (z_, zp)                                                   // compute loss function
    end css

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Return the full parameter vector for the MA(q) model.
     */
    override def parameter: VectorD = δ +: b

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Predict a value for y_t using the 1-step ahead forecast.
     *
     *      y_t = δ +  b_0 e_t-1 + b_1 e_t-2 + ... + b_q-1 e_t-p
     *
     *  @param t   the time point being predicted
     *  @param y_  the actual values to use in making predictions
     */
    override def predict (t: Int, y_ : VectorD): Double =
        if t == 0 then e(0) = 0                                         // from backcast: assume no error
        if t == 1 then e(1) = y_(1) - yf(0, 1)                          // first real point

        var sum = δ                                                     // intercept
        for j <- 0 until q do                                           // add MA terms (shocks)
            if t-j >= 0 then sum += b(j) * e(t-j)                       // e(t-j = -1) does not exists; b(j) = 0(j)

        if t < y_.dim-1 then e(t+1) = y_(t+1) - sum                     // update the error vector (uncomment for first train)
        sum                                                             // prediction yp
    end predict

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Produce a vector of size hh, h = 1 to hh-steps ahead forecasts for the model,
     *  i.e., forecast the following time points:  t+1, ..., t+h.
     *  Intended to work with rolling validation (analog of predict method).
     *  @param t   the time point from which to make forecasts
     *  @param y_  the actual values to use in making predictions
     */
    override def forecast (t: Int, y_ : VectorD = yb): VectorD =
        val yh = new VectorD (hh)                                       // hold forecasts for each horizon
        for h <- 1 to hh do
            var sum = δ                                                 // intercept
            for j <- h-1 until q do                                     // add MA terms (shocks) from before hozizon
                if t-j >= 0 then sum += b(j) * e(t-j)                   // e(t-j = -1) does not exists; b(j) = 0(j)
            yf(t, h) = sum                                              // record in forecast matrix
            yh(h-1)  = sum                                              // record forecasts for each horizon
        yh                                                              // return forecasts for all horizons
    end forecast

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Forecast values for all y_.dim time points at horizon h (h-steps ahead).
     *  Assign into FORECAST MATRIX and return the h-steps ahead forecast.
     *  Note, `predictAll` provides predictions for h = 1.
     *  @see `forecastAll` method in `Forecaster` trait.
     *  @param h   the forecasting horizon, number of steps ahead to produce forecasts
     *  @param y_  the actual values to use in making forecasts
     */
    override def forecastAt (h: Int, y_ : VectorD = yb): VectorD =
        if h < 2 then flaw ("forecastAt", s"horizon h = $h must be at least 2")

        for t <- y_.indices do                                          // make forecasts over all time points for horizon h
            var sum = δ                                                 // intercept
            for j <- h-1 until q do                                     // add MA terms (shocks) from before hozizon
                if t-j >= 0 then sum += b(j) * e(t-j)                   // e(t-j = -1) does not exists; b(j) = 0(j)
            yf(t, h) = sum                                              // record in forecast matrix
        yf(?, h)                                                        // return the h-step ahead forecast vector
        yf(?, h)                                                        // return the h-step ahead forecast vector
    end forecastAt

end MA


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `MA` companion object provides factory methods for the
 *  `MA` class.
 */
object MA:

    private val flaw  = flawf ("MA")                                    // flaw function

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Create a `MA` object.
     *  @param y       the response vector (time series data)
     *  @param hh      the maximum forecasting horizon (h = 1 to hh)
     *  @param tRng    the time range, if relevant (time index may suffice)
     *  @param hparam  the hyper-parameters
     */
    def apply (y: VectorD, hh: Int, tRng: Range = null, hparam: HyperParameter = AR.hp): MA =
        new MA (y, hh, tRng, hparam)
    end apply

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Solve for and return the coefficient/parameter θ for an MA(1) using the Method of Moments.
     *  Returns the appropriate root of the quadratic equation:  r(1 + θ) = θ
     *  @param r  an estimate for the first lag autocorrelation rho_1.
     */
    def solve_MA1 (r: Double): VectorD =
        if abs (r) <= 0.5 then
            VectorD (1 - sqrt (1 - 4 * r~^2) / 2 * r)                   // coefficients, only works when r(1) <= .5
        else
            flaw ("solve_MA1", s"first lag autocorrelation = $r must be in [-.5, .5] for MoM") 
            VectorD (-0.0)
    end solve_MA1

end MA


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `mATest` main function tests the `MA` class on real data:
 *  Forecasting Lake Levels using In-Sample Testing (In-ST).
 *  Test forecasts (h = 1 to hh steps ahead forecasts).
 *  @see cran.r-project.org/web/packages/fpp/fpp.pdf
 *  > runMain scalation.modeling.forecasting.mATest
 */
@main def mATest (): Unit =

    val hh = 3                                                            // maximum forecasting horizon

    val mod = new MA (y, hh)                                              // create model for time series data
    banner (s"In-ST Forecasts: ${mod.modelName} on LakeLevels Dataset")
    mod.trainNtest ()()                                                   // train and test on full dataset

    mod.forecastAll ()                                                    // forecast h-steps ahead (h = 1 to hh) for all y
    mod.diagnoseAll (y, mod.getYf)
//  Forecaster.evalForecasts (mod, mod.getYb, hh)
    println (s"Final In-ST Forecast Matrix yf = ${mod.getYf}")

end mATest


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `mATest2` main function tests the `MA` class on real data:
 *  Forecasting Lake Levels using Train-n-Test Split (TnT) with Rolling Validation.
 *  Test forecasts (h = 1 to hh steps ahead forecasts).
 *  @see cran.r-project.org/web/packages/fpp/fpp.pdf
 *  > runMain scalation.modeling.forecasting.mATest2
 */
@main def mATest2 (): Unit =

    val hh = 3                                                            // maximum forecasting horizon

    val mod = new MA (y, hh)                                              // create model for time series data
    banner (s"TnT Forecasts: ${mod.modelName} on LakeLevels Dataset")
    mod.trainNtest ()()                                                   // train and test on full dataset

    mod.rollValidate ()                                                 // TnT with Rolling Validation
    println (s"Final TnT Forecast Matrix yf = ${mod.getYf}")

end mATest2


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `mATest3` main function tests the `MA` class on real data:
 *  Forecasting COVID-19 using In-Sample Testing (In-ST).
 *  Test forecasts (h = 1 to hh steps ahead forecasts).
 *  > runMain scalation.modeling.forecasting.mATest3
 */
@main def mATest3 (): Unit =

    val yy = loadData_y ()
//  val y  = yy                                                           // full
    val y  = yy(0 until 116)                                              // clip the flat end
    val hh = 6                                                            // maximum forecasting horizon

    for q <- 1 to 5 do
        AR.hp("q") = q                                                    // number of MA terms
        val mod = new MA (y, hh)                                          // create model for time series data
        banner (s"In-ST Forecasts: ${mod.modelName} on COVID-19 Dataset")
        mod.trainNtest ()()                                               // train and test on full dataset

        mod.forecastAll ()                                                // forecast h-steps ahead (h = 1 to hh) for all y
        mod.diagnoseAll (y, mod.getYf)
//      Forecaster.evalForecasts (mod, mod.getYb, hh)
        println (s"Final In-ST Forecast Matrix yf = ${mod.getYf}")
    end for

end mATest3


//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `mATest4` main function tests the `MA` class on real data:
 *  Forecasting COVID-19 using Train-n-Test Split (TnT) with Rolling Validation.
 *  Test forecasts (h = 1 to hh steps ahead forecasts).
 *  > runMain scalation.modeling.forecasting.mATest4
 */
@main def mATest4 (): Unit =

    val yy = loadData_y ()
//  val y  = yy                                                           // full
    val y  = yy(0 until 116)                                              // clip the flat end
    val hh = 6                                                            // maximum forecasting horizon

    for q <- 1 to 5 do
       AR.hp("q") = q                                                    // number of MA terms
        val mod = new MA (y, hh)                                          // create model for time series data
        banner (s"TnT Forecasts: ${mod.modelName} on COVID-19 Dataset")
        mod.trainNtest ()()

        mod.rollValidate ()                                               // TnT with Rolling Validation
        println (s"Final TnT Forecast Matrix yf = ${mod.getYf}")
    end for

end mATest4


//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `mATest5` main function tests the `MA` class on small dataset.
 *  Test forecasts (h = 1 step ahead forecasts).
 *  > runMain scalation.modeling.forecasting.mATest5
 */
@main def mATest5 (): Unit =

    val y  = VectorD (1, 3, 4, 2, 5, 7, 9, 8, 6, 3)

    val mod = new MA (y, 1)                                               // create model for time series data
    banner (s"In-ST Forecasts: ${mod.modelName} on a Small Dataset")
    mod.trainNtest ()()                                                   // train and test on full dataset
    println (s"Final In-ST Forecast Matrix yf = ${mod.getYf}")
    new Baseline (y, "MA1")

/*
    AR.hp ("p") = 2
    mod = new MA (y, 1)                                                   // create model for time series data
    banner (s"In-ST Forecasts: ${mod.modelName} on a Small Dataset")
    mod.trainNtest ()()                                                   // train and test on full dataset
    println (s"Final In-ST Forecast Matrix yf = ${mod.getYf}")
    new Baseline (y, "MA2")
*/

end mATest5

