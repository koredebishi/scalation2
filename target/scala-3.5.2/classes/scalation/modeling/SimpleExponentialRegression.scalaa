package scalation
package modeling

import scala.math.exp

import scalation.mathstat._

/**
 * The `SimpleExponentialRegression` class implements a simple exponential regression model
 * of the form `y = b(0) * exp(b(1) * x)`, where:
 *   - `b(0)` is the base (scale factor),
 *   - `b(1)` is the exponent rate,
 *   - `x` is the feature/independent variable.
 *
 * @param x       the m-by-n input/data matrix (should have at least 2 columns: one for the intercept, one for the feature)
 * @param y       the m-dimensional response/output vector
 * @param fname   the feature/variable names (defaults to null)
 * @param hparam  the hyper-parameters (defaults to null)
 */
class SimpleExponentialRegression (x: MatrixD, y: VectorD, fname: Array [String] = null,
                                   hparam: HyperParameter = null)
      extends Predictor(x, y, fname, hparam)
         with Fit(dfm = 1, df = x.dim - 1)
         with NoSubModels:

  /** Maximum number of gradient descent iterations (epochs). */
  private val maxEpochs = 1000

  /** Learning rate used by gradient descent. */
  private val eta = 1e-5

  /** Debug function for logging progress. */
  private val debug = debugf("SimpleRegression", true)

  /** Flaw function for logging errors. */
  private val flaw = flawf("SimpleRegression")

  modelName = "SimpleExponentialRegression"

  // Validate that the input matrix has at least two columns
  if x.dim2 < 2 then flaw("init", s"Data matrix must have at least 2 columns: ${x.dim2}")

  /**
   * The exponential function used to compute predictions for a single value xi.
   *
   * y_hat = b(0) * exp(b(1) * xi)
   *
   * @param xi  a single feature value (e.g., x_(i, 1))
   * @return    the predicted response for xi
   */
  def f(xi: Double): Double = b(0) * exp(b(1) * xi)

  /**
   * Override the `predict` method from `Predictor` to handle matrix inputs.
   * For each row in the matrix `x_`, extract the feature xi from column 1,
   * then compute `f(xi)`.
   *
   * @param x_  the input/data matrix (defaults to the full training set x)
   * @return    a vector of predictions, one for each row of x_
   */
  override def predict (x_ : MatrixD): VectorD =
    val predictions = new VectorD(x_.dim)
    for i <- x_.indices do
      val xi = x_(i, 1)
      predictions(i) = f(xi)
    predictions

  /**
   * Train the exponential regression model using gradient descent.
   * Initializes the parameter vector b to (1, 0.3), then iteratively updates b
   * by minimizing the mean squared error: sum((y - f(x))^2).
   *
   * @param x_  the input/data matrix (defaults to x)
   * @param y_  the response/output vector (defaults to y)
   */
  def train(x_ : MatrixD = x, y_ : VectorD = y): Unit =
    var epoch = 0
    var previousLoss = Double.MaxValue
    b = VectorD(1.0, 0.3)  // Initialize parameters

    while epoch < maxEpochs do
      val gradients = VectorD(0.0, 0.0)
      var loss = 0.0

      // Compute gradients
      for i <- x_.indices do
        val xi = x_(i, 1)
        val yi = y_(i)

        val prediction = f(xi)
        val error = prediction - yi
        loss += error * error

        // Partial derivatives for b(0) and b(1)
        gradients(0) += (2.0 / x_.dim) * error * math.exp(b(1) * xi)
        gradients(1) += (2.0 / x_.dim) * error * b(0) * xi * math.exp(b(1) * xi)

      // Update parameters
      b(0) -= eta * gradients(0)
      b(1) -= eta * gradients(1)

      // Compute mean squared error
      loss /= x_.dim
      if epoch % 10 == 0 || epoch == maxEpochs - 1 then
        debug(s"Epoch $epoch:", s"Loss = $loss")

      // Check for convergence
      if math.abs(previousLoss - loss) < 1e-6 then
        debug(s"Converged at epoch $epoch with", s"loss = $loss")
        return

      previousLoss = loss
      epoch += 1

    debug(s"Max epochs ($maxEpochs) reached.", s"Final loss = ($previousLoss)")
  end train

  /**
   * Test the model by predicting y-values for the given matrix x_,
   * then comparing with the actual y_ via the `diagnose` function.
   *
   * @param x_  the input/data matrix (defaults to x)
   * @param y_  the response/output vector (defaults to y)
   * @return    a tuple containing (predictions, the diagnostic QoF measures)
   */
  def test(x_ : MatrixD = x, y_ : VectorD = y): (VectorD, VectorD) =
    val yp = predict(x_)
    (yp, diagnose(y_, yp))
  end test

end SimpleExponentialRegression


//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** A main method for testing `SimpleExponentialRegression` with a dataset
 *  that roughly follows y = 2 * exp(0.3 * x) for x=1..10.
 *  > runMain scalation.modeling.simpleExponentialRegressionTest
 */
@main def simpleExponentialRegressionTest (): Unit =

  val x = MatrixD ((10, 2), 1.0, 1.0,
                            1.0, 2.0,
                            1.0, 3.0,
                            1.0, 4.0,
                            1.0, 5.0,
                            1.0, 6.0,
                            1.0, 7.0,
                            1.0, 8.0,
                            1.0, 9.0,
                            1.0, 10.0)

  val y = VectorD (2.70,  // approximate 2 * exp(0.3*1)
                   3.64,  // approximate 2 * exp(0.3*2)
                   4.93,
                   6.64,
                   8.96,
                   12.10,
                   16.33,
                   22.05,
                   29.76,
                   40.17)

  // Create and train model, then test it
  val model = new SimpleExponentialRegression(x, y)
  model.trainNtest()()

  val yp = model.predict(x)
  println(s"y  = $y")
  println(s"yp = $yp")

  // Optional: Plot the actual vs. predicted values
  new Plot (null, y, yp, "SimpleExponentialRegressionTest", lines = true)

end simpleExponentialRegressionTest


//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** A second main method for testing `SimpleExponentialRegression` with a
 *  dataset that is actually quadratic (y = x^2), which is not exponential.
 *  This demonstrates how the model behaves with a mismatch in relationship.
 *  > runMain scalation.modeling.simpleExponentialRegressionTest2
 */
@main def simpleExponentialRegressionTest2 (): Unit =
  val x = MatrixD((5, 2),
    1.0, 2.0,
    1.0, 3.0,
    1.0, 4.0,
    1.0, 5.0,
    1.0, 6.0
  )
  val y = VectorD(4, 9, 16, 25, 36)  // Quadratic pattern: x^2
  val z = VectorD(1.0, 20.0, 80.0)

  // Create and train model, then test it
  val model = new SimpleExponentialRegression(x, y)
  model.trainNtest()()

  val yp = model.predict(x)
  println(s"y  = $y")
  println(s"yp = $yp")

  new Plot(null, y, yp, "SimpleExponentialRegressionTest")

  // Predict new points
  val yp2 = model.predict(z)
  println(s"predict ($z) = $yp2")

end simpleExponentialRegressionTest2
