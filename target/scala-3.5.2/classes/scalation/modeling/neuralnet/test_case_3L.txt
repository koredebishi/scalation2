
@main def neuralNet_3LTest11 (): Unit =

    // 9 data points:    Constant    x1    x2    y0    y1
    val xy = MatrixD ((9, 5), 1.0,  0.0,  0.0,  0.5,  0.4,          // dataset
                              1.0,  0.0,  0.5,  0.3,  0.3,
                              1.0,  0.0,  1.0,  0.2,  0.2,

                              1.0,  0.5,  0.0,  0.8,  0.7,
                              1.0,  0.5,  0.5,  0.5,  0.5,
                              1.0,  0.5,  1.0,  0.3,  0.4,

                              1.0,  1.0,  0.0,  1.0,  0.9,
                              1.0,  1.0,  0.5,  0.8,  0.7,
                              1.0,  1.0,  1.0,  0.5,  0.5)
    val x    = xy(?, 0 until 3)                                     // matrix for predictor variables
    val y    = xy(?, 3 until 5)                                     // matrix for response variables
    val sst0 = (y(?, 0) - y(?, 0).mean).normSq                      // sum of squares total for y_:0
    val sst1 = (y(?, 1) - y(?, 1).mean).normSq                      // sum of squares total for y_:1

    val η = 0.4                                                     // learning rate
    val a = MatrixD ((3, 2), 0.1, 0.1,                              // weights/parameters X -> Z
                             0.2, 0.1,
                             0.1, 0.1)
    val b = MatrixD ((2, 2), 0.1, 0.1,                              // weights/parameters Z -> Y
                             0.1, 0.1)

    val f0 = f_sigmoid                                              // hidden layer activation function
    val f1 = f_id                                                   // output layer activation function

    for epoch <- 1 to 10 do
        banner (s"improvement step $epoch")
        // forward
        val u  = x * a                                              // pre-activation vector
        val z  = f0.fM (u)                                          // hidden matrix
        val v  = z * b                                              // output pre-activation matrix
        val yp = f1.fM (v)                                          // predicted response from calculation for sigmoid
        // backward
        val ε  = y - yp                                             // error matrix
        val δ1 = ε *~ f1.dM (yp)                                    // delta1 @ output layer
        val δ0 = δ1 * b.Ƭ *~ f0.dM (z)                              // delta0 @ hidden layer
        b     += z.Ƭ * δ1 * η                                       // parameter update Z -> Y
        a     += x.Ƭ * δ0 * η                                       // parameter update X -> Z

        val sse0 = ε(?, 0).normSq                                   // sum of squared errors for column 0
        val sse1 = ε(?, 1).normSq                                   // sum of squared errors for column 1

        banner ("forward")
        println (s"u     = $u")
        println (s"z     = $z")
        println (s"v     = $v")
        println (s"yp    = $yp")
        banner ("backward")
        println (s"ε     = $ε")
        println (s"δ1    = $δ1")
        println (s"δ0    = $δ0")
        println (s"b     = $b")
        println (s"a     = $a")
        banner ("metrics")
        println (s"sse0  = $sse0")
        println (s"sse1  = $sse1")
        println (s"R^2_0 = ${1 - sse0/sst0}")
        println (s"R^2_1 = ${1 - sse1/sst1}")

end neuralNet_3LTest11

