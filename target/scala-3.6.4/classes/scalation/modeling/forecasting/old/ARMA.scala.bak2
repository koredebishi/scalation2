
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** @author  John Miller
 *  @version 2.0
 *  @date    Sun Jun 30 13:27:00 EDT 2024
 *  @see     LICENSE (MIT style license file).
 *
 *  @note    Model: Auto-Regressive, Moving Average (ARMA)
 *
 *  Parameter Estimation: Least Squares, Maximum Likelihood
 *  Conditional Sum-of-Squares (CSS), Negative Log-Likelihood (NLL)
 *  @see     arxiv.org/pdf/1611.00965
 *  @see     arxiv.org/html/2310.01198v2
 *  @see     arxiv.org/pdf/2310.01198
 *  @see     people.stat.sc.edu/hitchcock/stat520ch7slides.pdf
 *  @see     www.emu.edu.tr/mbalcilar/teaching2007/econ604/lecture_notes.htm
 *  @see     www.stat.berkeley.edu/~bartlett/courses/153-fall2010
 *  @see     www.princeton.edu/~apapanic/ORFE_405,_Financial_Time_Series_%28Fall_2011%29_files/slides12-13.pdf
 */

package scalation
package modeling
package forecasting2

import scalation.mathstat._
import scalation.optimization.quasi_newton.{BFGS => Optimizer}       // change import to change optimizer
//import scalation.optimization.quasi_newton.{LBFGS => Optimizer}
import scalation.random.NormalVec_c

import Forecaster.rdot
import Example_Covid.loadData_y
import Example_LakeLevels.y

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `ARMA` class provides basic time series analysis capabilities for Auto-Regressive,
 *  Moving Average (ARMA) models.  ARMA models are often used for forecasting.
 *  Given time series data stored in vector y, its next value y_t = combination of last
 *  p values and q shocks.
 *
 *      y_t = δ + Σ[φ_j y_t-j] + Σ[θ_j e_t-j] + e_t
 *
 *  where y_t is the value of y at time t and e_t is the residual/error term.
 *  @param y        the response vector (time series data) 
 *  @param hh       the maximum forecasting horizon (h = 1 to hh)
 *  @param tRng     the time range, if relevant (time index may suffice)
 *  @param hparam   the hyper-parameters (defaults to AR.hp)
 *  @param bakcast  whether a backcasted value is prepended to the time series (defaults to false)
 */
class ARMA (y: VectorD, hh: Int, tRng: Range = null,
            hparam: HyperParameter = AR.hp,
            bakcast: Boolean = false)
      extends AR (y, hh, tRng, hparam, bakcast):

    private   val debug = debugf ("ARMA", true)                         // debug function
    private   val flaw  = flawf ("ARMA")                                // flaw function
    protected val q     = hparam("q").toInt                             // use the last q shock/errors
    private   var z     = VectorD.nullv                                 // var for centered time series (used by first train)
    private   val pnq   = p + q                                         // sum of the orders
    private   val notHR = true                                          // don't use the HR algorithm

    modelName = s"ARMA($p, $q)"
    b = NormalVec_c (pnq, 0.0, 0.04).gen                                // randomly initialize the coefficients

// Use one of the following two train methods: swap names train0 & train and add override

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Train/fit an `ARMA` model to the times-series data in vector y_.
     *  Estimate the coefficient vector b for a (p, q)-th order Auto-Regressive ARMA(p, q) model.
     *  Uses a nonlinear optimizer (e.g., BFGS) to determine the coefficients.
     *  Residuals are re-estimated during optimization (may lead to instability)
     *  NOTE: Requires the error update in `predict` to be uncommented.
     *  @param x_null  the data/input matrix (ignored, pass null)
     *  @param y_      the training/full response vector (e.g., full y)
     */
    def train0 (x_null: MatrixD, y_ : VectorD): Unit =
        e.clear ()                                                      // set errors to zero
        val mu = y_.mean                                                // sample mean of y_
        z = y_ - mu                                                     // optimization works better using zero-centered data
        val optimizer = new Optimizer (css)                             // apply Quasi-Newton optimizer
        val (fb, bb) = optimizer.solve3 (b, 0.2)                        // optimal solution for loss function and parameters
        b = bb                                                          // assign optimized parameters to vector b
        δ = mu * (1 - b(0 until p).sum)                                 // determine intercept
        debug ("train0", s"optimized: p = $p, q - $q, δ = $δ, b = $b")
        println (s"train0: error e = $e")
    end train0

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Train/fit an `ARMA` model to the times-series data in vector y_.
     *  Estimate the coefficient vector b for a (p, q)-th order Auto-Regressive ARMA(p, q) model.
     *  Uses a nonlinear optimizer (e.g., BFGS) to determine the coefficients.
     *  Residuals are estimated before optimization using the Hannan-Rissanen Algorithm.
     *  NOTE: Requires the error update in `predict` to be commented out.
     *  @see faculty.washington.edu/dbp/s519/PDFs/13-overheads-2020.pdf
     *  @param x_null  the data/input matrix (ignored, pass null)
     *  @param y_      the training/full response vector (e.g., full y)
     */
    override def train (x_null: MatrixD, y_ : VectorD): Unit =
        if notHR then
            train0 (x_null, y_)
        else
            e.clear ()
            δ = 0.0                                                     // intercept for y_
            resid (y_)                                                  // set the residuals using high order AR
            val optimizer = new Optimizer (ss)                          // apply Quasi-Newton optimizer
            val (fb, bb) = optimizer.solve3 (b, 0.2)                    // optimal solution for loss function and parameters
            b = bb                                                      // recover parameters for z
            δ = y.mean * (1 - b(0 until p).sum)                             // determine intercept
            debug ("train", s"optimized: p = $p, q - $q, δ = $δ, b = $b")
            println (s"train: error e = $e")
    end train

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Use a higher order AR model to estimate the residuals (unobserved data).
     *  Set the residual/error vector e defined in `Forecaster`.
     *  @param y_      the training/full response vector (e.g., full y)
     */
    def resid (y_ : VectorD): Unit =
        val hp2 = new HyperParameter
        hp2 += ("p", pnq + 3, pnq + 3)                                  // Set the AR order to p + 1 + 3
        val ar = new AR (y, hh, tRng, hp2)                              // create an AR model
        ar.train (null, y_)                                             // train the AR model
        e += ar.residual                                                // use residuals from the AR model
    end resid

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Return the sum of squared errors (loss function).
     *  @param b_ the combined parameters (δ, b) where b = (φ, θ).
     */
    def ss (b_ : VectorD): Double =
        b = b_.copy                                                     // copy parameters from b vector
        val yy  = yb(1 until yb.dim)                                    // skip first (backcasted) value
        val yyp = predictAll (yb)                                       // predicted value for yb
//      debug ("ss", s"yy.dim = ${yy.dim}, yyp.dim = ${yyp.dim}")
        ssef (yy, yyp)                                                  // compute loss function
    end ss

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Return the conditional sum of squared errors (loss function).
     *  @param b_ the working copy of parameters vector b = φ ++ θ.
     */
    def css (b_ : VectorD): Double =
        b = b_.copy                                                     // copy parameters from b vector
        val z_ = z(1 until z.dim)                                       // skip first (backcasted) value
        val zp = predictAll (z)                                         // predicted value for z
//      debug ("css", s"z_.dim = ${z_.dim}, zp.dim = ${zp.dim}")
        ssef (z_, zp)                                                   // compute loss function
    end css

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Predict a value for y_t using the 1-step ahead forecast.
     *
     *      y_t = δ +  φ_0 y_t-1 + φ_1 y_t-2 + ... + φ_p-1 y_t-p
     *                 θ_0 e_t-1 + θ_1 e_t-2 + ... + θ_q-1 e_t-q
     *
     *  where φ = b(0 until p) and θ = b(p until p_q).
     *  When k < 0 let y_k = y_0 (i.e., assume first value repeats back in time),
     *  but do not assume errors repeat.  Note, column 1 of yf (yf(?, 1) holds yp.
     *  Must be executed in time order, so errors are properly recorded in vector e
     *  @see `predictAll` method in `Forecaster` trait.
     *  @see `rdot` in Forecaster.scala for reverse dot product implementation.
     *  @param t   the time point being predicted
     *  @param y_  the actual values to use in making predictions
     */
    override def predict (t: Int, y_ : VectorD): Double =
        if t == 0 then e(0) = 0                                         // from backcast: assume no error
        if t == 1 then e(1) = y_(1) - yf(0, 1)                          // first real point

        var sum = δ + rdot (b(0 until p), y_, t)                        // intercept + AR terms (use y); b(0 until p) = φ
        for j <- 0 until q do                                           // add MA terms (shocks)
            if t-j >= 0 then sum += b(p+j) * e(t-j)                     // e(t-j = -1) does not exists; b(p+j) = 0(j)

//      if t < y_.dim-1 then e(t+1) = y_(t+1) - sum                     // update the error vector (uncomment for first train)
        sum                                                             // prediction yp
    end predict

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Produce a vector of size hh, h = 1 to hh-steps ahead forecasts for the model,
     *  i.e., forecast the following time points:  t+1, ..., t+h.
     *  Intended to work with rolling validation (analog of predict method).
     *  Note, must include [ y_i, e_i ] before horizon and [ yp_i ] after horizon
     *  @param t   the time point from which to make forecasts
     *  @param y_  the actual values to use in making predictions
     */
    override def forecast (t: Int, y_ : VectorD = yb): VectorD =
        val yh = new VectorD (hh)                                       // hold forecasts for each horizon
        for h <- 1 to hh do
            var sum = δ + rdot (b(0 until p), yf, t, h-1)               // intercept + AR terms (use y and yp); b(0 until p) = φ
            for j <- h-1 until q do                                     // add MA terms (shocks) from before hozizon
                if t-j >= 0 then sum += b(p+j) * e(t-j)                 // e(t-j = -1) does not exists; b(p+j) = 0(j)
            yf(t, h) = sum                                              // record in forecast matrix
            yh(h-1)  = sum                                              // record forecasts for each horizon
        yh                                                              // return forecasts for all horizons
    end forecast

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Forecast values for all y_.dim time points at horizon h (h-steps ahead).
     *  Assign into FORECAST MATRIX and return the h-steps ahead forecast.
     *  Note, `predictAll` provides predictions for h = 1.
     *  @see `forecastAll` method in `Forecaster` trait.
     *  Note, must include [ y_i, e_i ] before horizon and [ yp_i ] after horizon
     *  @param h   the forecasting horizon, number of steps ahead to produce forecasts
     *  @param y_  the actual values to use in making forecasts
     */
    override def forecastAt (h: Int, y_ : VectorD = yb): VectorD =
        if h < 2 then flaw ("forecastAt", s"horizon h = $h must be at least 2")

        for t <- y_.indices do                                          // make forecasts over all time points for horizon h
            var sum = δ + rdot (b(0 until p), yf, t, h-1)               // intercept + AR terms (use y and yp); b(0 until p) = φ
            for j <- h-1 until q do                                     // add MA terms (shocks) from before hozizon
                if t-j >= 0 then sum += b(p+j) * e(t-j)                 // e(t-j = -1) does not exists; b(p+j) = 0(j)
            yf(t, h) = sum                                              // record in forecast matrix
        yf(?, h)                                                        // return the h-step ahead forecast vector
    end forecastAt

end ARMA


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `ARMA` companion object provides factory methods for the `ARMA` class.
 */
object ARMA:

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Create a `ARMA` object.
     *  @param y       the response vector (time series data)
     *  @param hh      the maximum forecasting horizon (h = 1 to hh)
     *  @param tRng    the time range, if relevant (time index may suffice)
     *  @param hparam  the hyper-parameters
     */
    def apply (y: VectorD, hh: Int, tRng: Range = null, hparam: HyperParameter = AR.hp): ARMA =
        new ARMA (y, hh, tRng, hparam)
    end apply

end ARMA


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `aRMATest` main function tests the `ARMA` class on real data:
 *  Forecasting Lake Levels using In-Sample Testing (In-ST).
 *  Test forecasts (h = 1 to hh steps ahead forecasts).
 *  @see cran.r-project.org/web/packages/fpp/fpp.pdf
 *  > runMain scalation.modeling.forecasting2.aRMATest
 */
@main def aRMATest (): Unit =

    val hh = 3                                                          // maximum forecasting horizon

    val mod = new ARMA (y, hh)                                          // create model for time series data
    banner (s"In-ST Forecasts: ${mod.modelName} on LakeLevels Dataset")
    mod.trainNtest ()()                                                 // train and test on full dataset

    mod.forecastAll ()                                                  // forecast h-steps ahead (h = 1 to hh) for all y
    mod.diagnoseAll (y, mod.getYf)
    Forecaster.evalForecasts (mod, mod.getYb, hh)
    println (s"Final In-ST Forecast Matrix yf = ${mod.getYf}")

end aRMATest


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `aRMATest2` main function tests the `ARMA` class on real data:
 *  Forecasting Lake Levels using Train-n-Test Split (TnT) with Rolling Validation.
 *  Test forecasts (h = 1 to hh steps ahead forecasts).
 *  @see cran.r-project.org/web/packages/fpp/fpp.pdf
 *  > runMain scalation.modeling.forecasting2.aRMATest2
 */
@main def aRMATest2 (): Unit =

    val hh = 3                                                          // maximum forecasting horizon

    val mod = new ARMA (y, hh)                                          // create model for time series data
    banner (s"TnT Forecasts: ${mod.modelName} on LakeLevels Dataset")
    mod.trainNtest ()()                                                 // train and test on full dataset

    mod.setSkip (0)
    mod.rollValidate ()                                                 // TnT with Rolling Validation
    mod.diagnoseAll (y, mod.getYf, Forecaster.teRng (y.dim))            // only diagnose on the testing set
    println (s"Final TnT Forecast Matrix yf = ${mod.getYf}")

end aRMATest2


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `aRMATest3` main function tests the `ARMA` class on real data:
 *  Forecasting COVID-19 using In-Sample Testing (In-ST).
 *  Test forecasts (h = 1 to hh steps ahead forecasts).
 *  Comparison of sMAPE for AR(p), ARMA(p, 0), ARY(p), and ARY_D(p).
 *
 *  20.3547,    29.9510,    38.0585,    45.3859,    51.7718,    56.6248  AR(1)
 *  20.2191,    29.9108,    38.1525,    45.5858,    52.2918,    57.3670  ARMA(1, 0)
 *  20.1794,    29.8589,    38.1450,    45.5634,    52.3478,    57.4474  ARY(1)
 *  19.9912,    30.1349,    38.7483,    45.1096,    49.5424,    52.5320  ARY_D(1)
 *
 *  18.1684,    27.0930,    35.1466,    41.4030,    46.7556,    51.7624  AR(2)
 *  17.7900,    25.3293,    33.3283,    39.5055,    44.9095,    50.6043  ARMA(2, 0)
 *  17.7728,    25.1705,    33.1900,    39.4218,    44.8621,    50.5991  ARY(2)
 *  17.7245,    24.2871,    31.1716,    35.9357,    40.5132,    46.4806  ARY_D(2)
 *
 *  17.7411,    24.9003,    31.8377,    37.3797,    42.1010,    47.4027  AR(3)
 *  17.4057,    23.9135,    30.5357,    35.5950,    40.6434,    46.4122  ARMA(3, 0)
 *  17.3594,    23.7550,    30.3838,    35.4514,    40.5868,    46.4292  ARY(3)
 *  17.2367,    23.2007,    29.4120,    33.5757,    38.8647,    44.1707  ARY_D(3)
 *
 *  17.5993,    24.4001,    30.4701,    35.1507,    39.6652,    44.3065  AR(4)
 *  17.2928,    23.6678,    29.5574,    34.0383,    38.9062,    44.1568  ARMA(4, 0)
 *  17.2457,    23.5122,    29.4110,    33.9350,    38.8422,    44.2303  ARY(4)
 *  17.1336,    23.1984,    29.1758,    33.5773,    38.6493,    43.8045  ARY_D(4)
 *
 *  17.7440,    24.3782,    30.2910,    34.6374,    39.2784,    43.5109  AR(5)
 *  17.2850,    23.6708,    29.5699,    34.0520,    38.9330,    44.2125  ARMA(5, 0)
 *  17.2314,    23.5178,    29.4345,    33.9602,    38.9022,    44.3249  ARY(5)
 *  17.1196,    23.1224,    29.1769,    33.6120,    38.7839,    43.9346  ARY_D(5)
 *
 *  > runMain scalation.modeling.forecasting2.aRMATest3
 */
@main def aRMATest3 (): Unit =

    val yy = loadData_y ()
//  val y  = yy                                                         // full
    val y  = yy(0 until 116)                                            // clip the flat end
    val hh = 6                                                          // maximum forecasting horizon

    AR.hp("q") = 1                                                      // number of MA terms
    for p <- 1 to 1 do
        AR.hp("p") = p                                                  // number of AR terms
        val mod = new ARMA (y, hh)                                      // create model for time series data
        banner (s"In-ST Forecasts: ${mod.modelName} on COVID-19 Dataset")
        mod.trainNtest ()()                                             // train and test on full dataset

        mod.forecastAll ()                                              // forecast h-steps ahead (h = 1 to hh) for all y
        mod.diagnoseAll (y, mod.getYf)
        Forecaster.evalForecasts (mod, mod.getYb, hh)
        println (s"Final In-ST Forecast Matrix yf = ${mod.getYf}")
    end for

end aRMATest3


//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `aRMATest4` main function tests the `ARMA` class on real data:
 *  Forecasting COVID-19 using Train-n-Test Split (TnT) with Rolling Validation.
 *  Test forecasts (h = 1 to hh steps ahead forecasts).
 *  Comparison of sMAPE for AR(p), ARMA(p, 0), ARY(p), and ARY_D(p).
 *
 *  19.1334,    31.1906,    44.3787,    55.1576,    65.1810,    74.0524  AR(1)
 *  19.0397,    30.4570,    43.9113,    54.9642,    65.3163,    74.2124  ARMA(1, 0)
 *  19.0397,    30.4570,    43.9113,    54.9642,    65.3163,    74.2124  ARY(1)
 *
 *  16.6447,    26.9109,    39.8106,    50.8595,    60.2176,    68.6317  AR(2)
 *  16.9459,    26.6301,    39.3354,    50.8941,    61.0822,    70.3496  ARMA(2, 0)
 *  16.8833,    26.4824,    39.2329,    50.8677,    61.0624,    70.3218  ARY(2)
 *
 *  15.9232,    23.5929,    34.3577,    44.1784,    53.6513,    62.0129  AR(3)
 *  15.9052,    21.8056,    31.7951,    41.3657,    51.8574,    61.7836  ARMA(3, 0)
 *  15.7190,    21.7959,    32.1395,    42.0074,    52.6874,    62.7276  ARY(3)
 *
 *  15.3256,    22.6893,    30.7558,    39.6274,    48.6646,    56.7375  AR(4)
 *  15.1026,    20.3376,    27.3229,    35.9123,    40.6935,    50.1041  ARMA(4, 0)
 *  14.6791,    19.9940,    26.5644,    35.4590,    41.4955,    50.8660  ARY(4)
 *
 *  15.9166,    21.5246,    28.0675,    36.8669,    43.3785,    51.1786  AR(5)
 *  15.5742,    20.2465,    28.8253,    36.8582,    43.1053,    48.5483  ARMA(5, 0)
 *  15.0232,    19.4222,    27.1981,    35.4744,    40.3466,    48.4066  ARY(5)
 *
 *  > runMain scalation.modeling.forecasting2.aRMATest4
 */
@main def aRMATest4 (): Unit =

    val yy = loadData_y ()
//  val y  = yy                                                         // full
    val y  = yy(0 until 116)                                            // clip the flat end
    val hh = 6                                                          // maximum forecasting horizon

    AR.hp("q") = 0                                                      // number of MA terms
    for p <- 1 to 5 do
        AR.hp("p") = p                                                  // number of AR terms
        val mod = new ARMA (y, hh)                                      // create model for time series data
        banner (s"TnT Forecasts: ${mod.modelName} on COVID-19 Dataset")
        mod.trainNtest ()()

        mod.setSkip (0)
        mod.rollValidate ()                                             // TnT with Rolling Validation
        mod.diagnoseAll (y, mod.getYf, Forecaster.teRng (y.dim))        // only diagnose on the testing set
        println (s"Final TnT Forecast Matrix yf = ${mod.getYf}")
    end for

end aRMATest4


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `aRMATest5` main function tests the `ARMA` class on real data:
 *  Forecasting COVID-19 using In-Sample Testing (In-ST).
 *  Test forecasts (h = 1 to hh steps ahead forecasts).
 *  Comparison of sMAPE for ARMA(p, 1) (i.e., q = 1) for different p orders.
 *  > runMain scalation.modeling.forecasting2.aRMATest5
 */
@main def aRMATest5 (): Unit =

    val yy = loadData_y ()
//  val y  = yy                                                         // full
    val y  = yy(0 until 116)                                            // clip the flat end
    val hh = 6                                                          // maximum forecasting horizon

    AR.hp("q") = 1                                                      // number of MA terms
    for p <- 1 to 5 do
        AR.hp("p") = p                                                  // number of AR terms
        val mod = new ARMA (y, hh)                                      // create model for time series data
        banner (s"In-ST Forecasts: ${mod.modelName} on COVID-19 Dataset")
        mod.trainNtest ()()                                             // train and test on full dataset

        mod.forecastAll ()                                              // forecast h-steps ahead (h = 1 to hh) for all y
        Forecaster.evalForecasts (mod, mod.getYb, hh)
        println (s"Final In-ST Forecast Matrix yf = ${mod.getYf}")
    end for

end aRMATest5


//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `aRMATest6` main function tests the `ARMA` class on small dataset.
 *  Test forecasts (h = 1 step ahead forecasts).
 *  > runMain scalation.modeling.forecasting2.aRMATest6
 */
@main def aRMATest6 (): Unit =

    val y  = VectorD (1, 3, 4, 2, 5, 7, 9, 8, 6, 3)

    AR.hp ("q") = 0
    var mod = new ARMA (y, 1)                                             // create model for time series data
    banner (s"In-ST Forecasts: ${mod.modelName} on a Small Dataset")
    mod.trainNtest ()()                                                   // train and test on full dataset
    println (s"Final In-ST Forecast Matrix yf = ${mod.getYf}")
    new Baseline (y, "AR1")

    AR.hp ("p") = 2
    mod = new ARMA (y, 1)                                                 // create model for time series data
    banner (s"In-ST Forecasts: ${mod.modelName} on a Small Dataset")
    mod.trainNtest ()()                                                   // train and test on full dataset
    println (s"Final In-ST Forecast Matrix yf = ${mod.getYf}")
    new Baseline (y, "AR2")

end aRMATest6

