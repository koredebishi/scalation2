
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** @author  John Miller
 *  @version 2.0
 *  @date    Sat Mar 27 14:40:57 EDT 2021
 *  @see     LICENSE (MIT style license file).
 *
 *  @note    Model Part: Convolutional Filter (tow dimensional)
 *
 *  @see leonardoaraujosantos.gitbook.io/artificial-inteligence/machine_learning/deep_learning/convolution
 *  @see e2eml.school/convolution_one_d.html
 */

package scalation
package modeling
package neuralnet

import scala.math.min

import scalation.mathstat._
import scalation.random.RandomMatD

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `CoFilter_2D` class provides a convolution filter (cofilter) for
 *  taking a weighted average over a window of an input matrix.
 *  @param width  the width of the cofilter
 */
class CoFilter_2D (width: Int = 5):

    private val rmg = RandomMatD (width, width, 2.0)                          // random matrix genertor
    private var mat = rmg.gen                                                 // the filter's matrix

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Update the parameters, i.e., the filter's matrix.
     *  @param vec_  the new matrix parameters
     */
    def update (mat_ : MatrixD): Unit = mat = mat_

end CoFilter_2D


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `CoFilter_2D` object provides the convolution and pooling operators.
 *  @see `mathstat.MatrixD` for infix implementations of
 *  conv (*+)   -- valid convolution, no reversal
 *  convs (*~+) -- same convolution, no reversal
 */
object CoFilter_2D:

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Return the 'full' (less common) convolution of cofilter c and input matrix x.
     *  @param c  the cofilter matrix of coefficients
     *  @param x  the input/data matrix
     */
    def convf (c: MatrixD, x: MatrixD): MatrixD =
        val y = new MatrixD (c.dim + x.dim - 1, c.dim2 + x.dim2 - 1)
        for k <- y.indices; l <- y.indices2 do
            var sum = 0.0
            for i <- 0 until min (k+1, c.dim); j <- 0 until min (l+1, c.dim2) do
                if k - i < x.dim && l - j < x.dim2 then sum += c(i, j) * x(k - i, l - j)
            y(k, l) = sum
        end for
        y
    end convf

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Return the 'same' convolution of cofilter c and input matrix x.
     *  Same means that the size of the result is the same as the input (via padding).
     *  @param c  the cofilter matrix of coefficients
     *  @param x  the input/data matrix
     */
    def convs (c: MatrixD, x: MatrixD): MatrixD =
        val y   = new MatrixD (x.dim, x.dim2)
        val off = (c.dim / 2, c.dim2 / 2)
        for k <- off._1 until y.dim + off._1; l <- off._2 until y.dim2 + off._2 do
            var sum = 0.0
            for i <- 0 until min (k+1, c.dim); j <- 0 until min (l+1, c.dim2) do
                if k - i < x.dim && l - j < x.dim2 then sum += c(i, j) * x(k - i, l - j)
            y(k-off._1, l-off._2) = sum
        end for
        y
    end convs

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Return the 'valid' (no padding) convolution of cofilter c and input matrix x.
     *  Caveat: does not include reversal.
     *  @param c  the cofilter matrix of coefficients
     *  @param x  the input/data matrix
     */
    def conv (c: MatrixD, x: MatrixD): MatrixD =
        val y = new MatrixD (x.dim - c.dim + 1, x.dim2 - c.dim2 + 1)
        for k <- y.indices; l <- y.indices2 do
            y(k, l) = (x(k until k + c.dim, l until l + c.dim2) *~ c).sum
        y
    end conv

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Return the convolution over all data instances.
     *  @param c  the cofilter matrix of coefficient
     *  @param x  the input/data matrix
     *
    def conv (c: MatrixD, x: MatrixD): MatrixD =
        MatrixD (for i <- x.indices yield conv (c, x(i)))
    end conv
     */

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Return the max-pooling results over all pooling windows.
     *  @param x  the input/data matrix
     *  @param s  the size (s x s) of the pooling window
     */
    def pool (x: MatrixD, s: Int = 2): MatrixD =
        val p = new MatrixD (x.dim / s, x.dim2 / s)
        for j <- p.indices; k <- p.indices2 do
            val (jj, kk) = (s * j, s * k)
            p(j, k) = x(jj until jj+s, kk until kk+s).mmax
        p
    end pool

    //::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Return the pooling results over all data instances.
     *  @param x  the input/data matrix
     *  @param s  the the size of the pooling window
     *
    def pool (x: MatrixD, s: Int): MatrixD =
        MatrixD (for i <- x.indices yield pool (x(i), s))
    end pool
     */

end CoFilter_2D

import CoFilter_2D._

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `coFilter_2DTest` main function is used to test the `CoFilter_2D` class.
 *  Test using the simple example from CNN_2D section of the ScalaTion textbook.
 *  > runMain scalation.modeling.neuralnet.coFilter_2DTest
 *
@main def coFilter_2DTest (): Unit =

    val x = MatrixD ((2, 5), 1, 2, 3, 4, 5,
                             6, 7, 8, 9, 10)
    val c = MatrixD (0.5, 1, 0.5)
    val φ = conv (c, x)
    val z = pool (φ, 3)

    println (s"input       x = $x")
    println (s"filter      c = $c")
    println (s"feature map φ = $φ")
    println (s"pooled      z = $z")

end coFilter_2DTest
 */


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `coFilter_2DTest2` main function is used to test the `CoFilter_2D` class.
 *  Test using the Example Calculation from the 2D CNN section of the ScalaTion textbook.
 *  > runMain scalation.modeling.neuralnet.coFilter_2DTest2
 */
@main def coFilter_2DTest2 (): Unit =

    import ActivationFun.f_reLU

    val x  = MatrixD ((5, 5), 0, 0, 2, 1, 0,
                              0, 0, 0, 1, 2,
                              1, 2, 2, 0, 2,
                              2, 0, 0, 0, 1,
                              2, 2, 2, 0, 1)

    val c  = MatrixD ((2, 2), 1, 1,
                              0, 1)
    val φ  = conv (c, x)
    val φa = f_reLU.fM (φ)
    val p  = pool (φa, 2)
    val z  = p.flatten

    println (s"input matrix  x = $x")
    println (s"conv. filter  c = $c")
    println (s"feature map   φ = $φ")
    println (s"feature map-a φa = $φa")
    println (s"pooled map    p = $p")
    println (s"hidden vector z = $z")

end coFilter_2DTest2


//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `coFilter_2DTest3` main function is used to test the `CoFilter_2D` class's
 *  convolutional operator.
 *  > runMain scalation.modeling.neuralnet.coFilter_2DTest3
 *
@main def coFilter_2DTest3 (): Unit =

    val c = MatrixD (1, 2, 3, 4, 5)
    val x = MatrixD (1, 2, 3, 4, 5, 6, 7)

    banner (s"c convolution x")
    println (s"c = $c")
    println (s"x = $x")

    banner ("Full Convolution: convf (c, x)")
    println (s"y = ${convf (c, x)}")
    banner ("Same Convolution: convs (c, x)")
    println (s"y = ${convs (c, x)}")
    banner ("Valid Convolution: conv (c.reverse, x)")
    println (s"y = ${conv (c.reverse, x)}")

    banner ("Valid Convolution: conv (c, x)")   // without expected reversal
    println (s"y = ${conv (c, x)}")

end coFilter_2DTest3
 */

