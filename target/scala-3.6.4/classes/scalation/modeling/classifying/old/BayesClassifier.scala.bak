
//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** @author  John Miller, Hao Peng
 *  @version 2.0
 *  @date    Sat Aug  8 20:26:34 EDT 2015
 *  @see     LICENSE (MIT style license file).
 *
 *  @title   Model Framework:  Trait for Bayesian Classifiers
 */

package scalation
package modeling
package classifying

import scala.runtime.ScalaRunTime.stringOf

import scalation.mathstat._
import scalation.log2

//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `BayesClassifier` trait provides methods for Bayesian Classifiers, including
 *  calculations of joint probabilities and Conditional Mutual Information (CMI).
 *  @param k  the number of classes
 */
trait BayesClassifier (k: Int = 2):

    private val EPS = 1E-9                                              // a small value

//    FIX: replace Array [Array [Array [MatrixD]]] with Array [Array [RTensorD]]
//    nu_(j)(l)(x_ij)(x_il, yi) += 1                       // increment frequency for xj, xl, yi <-- current
//    nu_(j, l, x(j), x(l), k) += 1                        // 5D Tensor not implemented
//    nu_(j)(x(j)(l, x(l), k) += 1                         // 2D Array of 3D RTensorD <-- try this

/*
    val (x_dim2, vc) = (4, VectorI (3, 3, 2, 2))
    val nu_ = Array.ofDim [Array [RTensorD]] (x_dim2)
    for j <- 0 until x_dim2 do nu_(j) = Array.fill (vc(j)) (new RTensorD (x_dim2, vc, k))
*/

    //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Compute the joint frequency of X, Z and y for each combination of features xj, xl.
     *  @param x   the integer-valued data vectors stored as rows of a matrix
     *  @param y   the class vector, where y(i) = class for row i of the matrix x, x(i)
     *  @param vc  the vector of value counts (number of distinct values per feature)
     */
    def freq_XZy (x: MatrixD, y: VectorI, vc: VectorI): Array [Array [Array [MatrixD]]] =
        val nu_XZy = Array.ofDim [Array [MatrixD]] (x.dim2, x.dim2)
        for j <- x.indices2; l <- j + 1 until x.dim2 do
            nu_XZy(j)(l) = Array.ofDim [MatrixD] (vc(j))
            nu_XZy(l)(j) = Array.ofDim [MatrixD] (vc(l))
            for xj <- 0 until vc(j) do nu_XZy(j)(l)(xj) = new MatrixD (vc(l), k)
            for xl <- 0 until vc(l) do nu_XZy(l)(j)(xl) = new MatrixD (vc(j), k)
        end for
        for i <- x.indices do updateFreq (x, y, i, nu_XZy)
        nu_XZy
    end freq_XZy

    //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Increment frequency counters used in CMI calculations based on the i-th
     *  row of the data matrix.
     *  @param x       the integer-valued data vectors stored as rows of a matrix
     *  @param y       the class vector, where y(i) = class for row i of the matrix x, x(i)
     *  @param i       the index for current data row
     *  @param nu_XZy  the joint frequency of X, Z and y for each combination of features xj, xl.
     */
    private def updateFreq (x: MatrixD, y: VectorI, i: Int,
                            nu_XZy: Array [Array [Array [MatrixD]]]): Unit =
        val yi    = y(i)                                                // get the class for ith row
        for j <- x.indices2 do                                          // for each feature/variable xj
            for l <- j + 1 until x.dim2 do                              // for each feature/variable xl
                val x_ij = x(i, j).toInt
                val x_il = x(i, l).toInt
                nu_XZy(j)(l)(x_ij)(x_il, yi) += 1                       // increment frequency for xj, xl, yi
                nu_XZy(l)(j)(x_il)(x_ij, yi) += 1                       // increment frequency for xl, xj, yi
            end for
        end for
    end updateFreq

    //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Compute the joint probability of X and y for each feature xj.
     *  @param x   the integer-valued data vectors stored as rows of a matrix
     *  @param y   the class vector, where y(i) = class for row i of the matrix x, x(i)
     *  @param vc  the vector of value counts (number of distinct values per feature)
     */
    def jprob_Xy (x: MatrixD, y: VectorI, vc: VectorI): RTensorD =
        val nu_Xy = RTensorD.freq (x, vc, y, k)                         // joint frequency of X and y
        val p_Xy  = new RTensorD (x.dim2, vc, k)
        for j <- x.indices2; xj <- 0 until vc(j) do
            p_Xy(j)(xj) = (nu_Xy(j)(xj) + EPS) / x.dim.toDouble
        end for
        p_Xy
    end jprob_Xy

    //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Compute the joint probability of X, Z and y each each combination of features xj, xl.
     *  @param x   the integer-valued data vectors stored as rows of a matrix
     *  @param y   the class vector, where y(i) = class for row i of the matrix x, x(i)
     *  @param vc  the vector of value counts (number of distinct values per feature)
     */
    def jprob_XZy (x: MatrixD, y: VectorI, vc: VectorI): Array [Array [Array [MatrixD]]] =
        val nu_XZy = freq_XZy (x, y, vc)                                // joint frequency of X, Z and y
        val p_XZy  = Array.ofDim [Array [MatrixD]] (x.dim2, x.dim2)
        for j <- x.indices2; l <- j + 1 until x.dim2 do
            p_XZy(j)(l) = Array.ofDim [MatrixD] (vc(j))
            for xj <- 0 until vc(j) do
                p_XZy(j)(l)(xj) = new MatrixD (vc(l), k)
                for xl <- 0 until vc(l) do
                    p_XZy(j)(l)(xj)(xl) = (nu_XZy(j)(l)(xj)(xl) + EPS) / x.dim.toDouble
        end for
        p_XZy
    end jprob_XZy

    //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Compute Conditional Mutual Information (CMI) matrix given the probability
     *  of y and joint probabilities of Xy and XZy, where y is the class, and
     *  X & Z are features, I(x; z | y).
     *  @see en.wikipedia.org/wiki/Conditional_mutual_information
     *  @param x   the integer-valued data vectors stored as rows of a matrix
     *  @param vc  the vector of value counts (number of distinct values per feature)
     *  @param y   the class vector, where y(i) = class for row i of the matrix x, x(i)
     */
    def cmi (x: MatrixD, vc: VectorI, y: VectorI): MatrixD =
        val n      = x.dim2                                             // number of features
        val cmiMx  = new MatrixD (n, n)                                 // CMI matrix

        val p_y   = y.freq (k)._2                                       // class/prior probability of y
        val p_Xy  = jprob_Xy (x, y, vc)                                 // joint probability of X and y
        val p_XZy = jprob_XZy (x, y, vc)                                // joint probability of X, Z and y

        for c <- 0 until k do                                           // check each class, where k = p_y.size
            val py = p_y(c)
            for j <- p_Xy.indices; xj <- 0 until vc(j) do
                val pxy = p_Xy(j, xj, c)
                for l <- j + 1 until n; xl <- 0 until vc(l) do
                    val pzy      = p_Xy(l, xl, c)
                    val pxzy     = p_XZy(j)(l)(xj)(xl, c)
                    cmiMx(j, l) += pxzy * log2 ((py * pxzy) / (pxy * pzy))
        end for
        cmiMx
    end cmi

    //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    def jProbXY (x: VectorI, vcx: Int, y: VectorI, k: Int): MatrixD =
        (Probability.freq (x, vcx, y, k) + EPS) / x.dim.toDouble
    end jProbXY

    //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    def jProbXZY (x: VectorI, z: VectorI, vcxz: VectorI, y: VectorI, k: Int): RTensorD =
        (RTensorD.freq (x, z, vcxz, y, k) + EPS) / x.dim.toDouble
    end jProbXZY

    //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Calculate the Conditional Mutual Information (CMI) given data vectors x and z,
     *  and response/classification vector y, i.e., I(x; z | y).
     *  @see en.wikipedia.org/wiki/Conditional_mutual_information
     *  @param x     the first integer-valued data vector
     *  @param z     the second integer-valued data vector
     *  @param vcxz  the vector of value counts (number of distinct values per feature)
     *  @param y     the class vector, where y(i) = class
     */
    def cmi (x: VectorI, z: VectorI, vcxz: VectorI, y: VectorI): Double =
        var cmi_ = 0.0

        val p_y   = y.freq (k)._2                                       // class/prior probability of y
        val p_xy  = jProbXY (x, vcxz(0), y, k)                          // joint probability of x and y
        val p_zy  = jProbXY (z, vcxz(1), y, k)                          // joint probability of z and y
        val p_xzy = jProbXZY (x, z, vcxz, y, k)                         // joint probability of x, z and y

        for c <- 0 until k do                                           // check each class, where k = p_y.size
            val py = p_y(c)
            for xj <- 0 until vcxz(0) do
                val pxy = p_xy(xj, c)
                for zl <- 0 until vcxz(1) do
                    val pzy   = p_zy(zl, c)
                    val pxzy  = p_xzy(xj, zl, c)
                    cmi_     += pxzy * log2 ((py * pxzy) / (pxy * pzy))
        end for
        cmi_
    end cmi

    //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
    /** Calculate the Conditional Mutual Information (CMI) matrix given data matrix x
     *  and response/classification vector y, i.e., I(x; z | y) for all pairs
     *  features xj and xl in matrix x.
     *  @see en.wikipedia.org/wiki/Conditional_mutual_information
     *  @param x   the integer-valued data vectors stored as rows of a matrix
     *  @param vc  the vector of value counts (number of distinct values per feature)
     *  @param y   the class vector, where y(i) = class for row i of the matrix x, x(i)
     */
    def cmiMatrix (x: MatrixD, vc: VectorI, y: VectorI): MatrixD =
        val n      = x.dim2                                             // number of features
        val cmiMx  = new MatrixD (n, n)                                 // CMI matrix

        for j <- x.indices2; l <- j + 1 until n do
            cmiMx(j, l) = cmi (x(?, j).toInt, x(?, l).toInt, VectorI (vc(j), vc(l)), y)
        end for
        cmiMx
    end cmiMatrix

end BayesClassifier


//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
/** The `bayesClassifierTest` main function is used to test the `BayesClassifier`
 *  class using the Play Tennis Example.
 *  > runMain scalation.modeling.classifying.bayesClassifierTest
 */
@main def bayesClassifierTest (): Unit =

    import Example_PlayTennis.{x, y, k}

    println (s"x = $x")
    println (s"y = $y")

    object bc extends BayesClassifier (k)                               // create a Bayes Classifier object

    Classifier.shift2zero (x)                                           // make sure values for all features start at zero
    val vc   = Classifier.vc_fromData (x)                               // set value counts from data

    val p_y = y.freq (k)._2                                             // class/prior probability of y
    banner (s"Probability of Response y")
    println (s"p_y = $p_y")

    val jp_Xy = bc.jprob_Xy (x, y, vc)                                  // joint probability of X and y
    for j <- x.indices2 do
        banner (s"Probability Feature x$j and Response y")
        println (s"jp_Xy = ${jp_Xy(j)}")
    end for

    val jp_XZy = bc.jprob_XZy (x, y, vc)                                // joint probability of X, Z and y
    for j <- x.indices2; l <- j + 1 until x.dim2 do
        banner (s"Probability Features x$j, x$l and Response y")
        println (s"jp_XZy = ${stringOf (jp_XZy(j)(l))}")
    end for

    banner ("Conditional Mutual Information")
    val cmi = bc.cmi (x, vc, y)                                         // Conditional Mutual Information (CMI)
    println (s"cmi = $cmi")

    val cmi2 = bc.cmiMatrix (x, vc, y)                                  // Conditional Mutual Information (CMI)
    println (s"cmi2 = $cmi2")

    val cmiAns = MatrixD ((4, 4), 0.00000, 0.419593, 0.222815, 0.311752,
                                  0.00000, 0.00000,  0.419593, 0.168895,
                                  0.00000, 0.00000,  0.00000,  0.0610538,
                                  0.00000, 0.00000,  0.00000,  0.00000)
    println (s"cmiAns = $cmiAns")

end bayesClassifierTest

